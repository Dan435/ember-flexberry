{"version":3,"sources":["dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.jshint.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.jscs-test.js","dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.jshint.js","dummy/tests/adapters/application.jscs-test.js","dummy/tests/adapters/application.jshint.js","dummy/tests/app.jscs-test.js","dummy/tests/app.jshint.js","dummy/tests/components/css-picker.jscs-test.js","dummy/tests/components/css-picker.jshint.js","dummy/tests/components/number-input.jscs-test.js","dummy/tests/components/number-input.jshint.js","dummy/tests/components/settings-example.jscs-test.js","dummy/tests/components/settings-example.jshint.js","dummy/tests/controllers/application.jscs-test.js","dummy/tests/controllers/application.jshint.js","dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jscs-test.js","dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jshint.js","dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jscs-test.js","dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jshint.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.jscs-test.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.jshint.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/date-format.jscs-test.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/date-format.jshint.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.jscs-test.js","dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.jshint.js","dummy/tests/controllers/components-examples/flexberry-button/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-button/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-ddau-checkbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-ddau-checkbox/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-field/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-field/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-file/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-file/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-groupedit/configurate-row-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-groupedit/configurate-row-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/autocomplete-order-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/autocomplete-order-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/default-ordering-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/default-ordering-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/hierarchy-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/hierarchy-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/object-list-view-resize.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/object-list-view-resize.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/selected-rows.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/selected-rows.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/configurate-rows.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/configurate-rows.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/custom-filter.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/custom-filter.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/limit-function-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/limit-function-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form/user.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form/user.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/selected-rows.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/selected-rows.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-toggler/ge-into-toggler-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-toggler/ge-into-toggler-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-tree/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-tree/settings-example.jshint.js","dummy/tests/controllers/components-examples/ui-message/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/ui-message/settings-example.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e/new.jshint.js","dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jscs-test.js","dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jshint.js","dummy/tests/controllers/integration-examples/edit-form/validation.jscs-test.js","dummy/tests/controllers/integration-examples/edit-form/validation.jshint.js","dummy/tests/controllers/log-service-examples/clear-log-form.jscs-test.js","dummy/tests/controllers/log-service-examples/clear-log-form.jshint.js","dummy/tests/controllers/log-service-examples/settings-example.jscs-test.js","dummy/tests/controllers/log-service-examples/settings-example.jshint.js","dummy/tests/controllers/new-platform-flexberry-services-lock-list.jscs-test.js","dummy/tests/controllers/new-platform-flexberry-services-lock-list.jshint.js","dummy/tests/controllers/sitemap-node.jscs-test.js","dummy/tests/controllers/sitemap-node.jshint.js","dummy/tests/controllers/user-setting-forms/user-setting-delete.jscs-test.js","dummy/tests/controllers/user-setting-forms/user-setting-delete.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint.js","dummy/tests/enums/ember-flexberry-dummy-gender.jscs-test.js","dummy/tests/enums/ember-flexberry-dummy-gender.jshint.js","dummy/tests/enums/ember-flexberry-dummy-vote-type.jscs-test.js","dummy/tests/enums/ember-flexberry-dummy-vote-type.jshint.js","dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jscs-test.js","dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jshint.js","dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jscs-test.js","dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jscs-test.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jscs-test.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jscs-test.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jscs-test.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/helpers/to-safe-string.jscs-test.js","dummy/tests/helpers/to-safe-string.jshint.js","dummy/tests/helpers/to-string.jscs-test.js","dummy/tests/helpers/to-string.jshint.js","dummy/tests/helpers/validate-properties.js","dummy/tests/integration/components/flexberry-checkbox-test.js","dummy/tests/integration/components/flexberry-checkbox-test.jscs-test.js","dummy/tests/integration/components/flexberry-checkbox-test.jshint.js","dummy/tests/integration/components/flexberry-datetime-picker-test.js","dummy/tests/integration/components/flexberry-datetime-picker-test.jscs-test.js","dummy/tests/integration/components/flexberry-datetime-picker-test.jshint.js","dummy/tests/integration/components/flexberry-ddau-checkbox-test.js","dummy/tests/integration/components/flexberry-ddau-checkbox-test.jscs-test.js","dummy/tests/integration/components/flexberry-ddau-checkbox-test.jshint.js","dummy/tests/integration/components/flexberry-dropdown-test.js","dummy/tests/integration/components/flexberry-dropdown-test.jscs-test.js","dummy/tests/integration/components/flexberry-dropdown-test.jshint.js","dummy/tests/integration/components/flexberry-error-test.js","dummy/tests/integration/components/flexberry-error-test.jscs-test.js","dummy/tests/integration/components/flexberry-error-test.jshint.js","dummy/tests/integration/components/flexberry-field-test.js","dummy/tests/integration/components/flexberry-field-test.jscs-test.js","dummy/tests/integration/components/flexberry-field-test.jshint.js","dummy/tests/integration/components/flexberry-groupedit-test.js","dummy/tests/integration/components/flexberry-groupedit-test.jscs-test.js","dummy/tests/integration/components/flexberry-groupedit-test.jshint.js","dummy/tests/integration/components/flexberry-lookup-test.js","dummy/tests/integration/components/flexberry-lookup-test.jscs-test.js","dummy/tests/integration/components/flexberry-lookup-test.jshint.js","dummy/tests/integration/components/flexberry-simpledatetime-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.jscs-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.jshint.js","dummy/tests/integration/components/flexberry-textarea-test.js","dummy/tests/integration/components/flexberry-textarea-test.jscs-test.js","dummy/tests/integration/components/flexberry-textarea-test.jshint.js","dummy/tests/integration/components/flexberry-textbox-test.js","dummy/tests/integration/components/flexberry-textbox-test.jscs-test.js","dummy/tests/integration/components/flexberry-textbox-test.jshint.js","dummy/tests/integration/components/flexberry-toggler-test.js","dummy/tests/integration/components/flexberry-toggler-test.jscs-test.js","dummy/tests/integration/components/flexberry-toggler-test.jshint.js","dummy/tests/integration/components/flexberry-validationmessage-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.jscs-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.jshint.js","dummy/tests/integration/components/flexberry-validationsummary-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.jscs-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.jshint.js","dummy/tests/integration/components/form-load-time-tracker-test.js","dummy/tests/integration/components/form-load-time-tracker-test.jscs-test.js","dummy/tests/integration/components/form-load-time-tracker-test.jshint.js","dummy/tests/integration/components/groupedit-toolbar-test.js","dummy/tests/integration/components/groupedit-toolbar-test.jscs-test.js","dummy/tests/integration/components/groupedit-toolbar-test.jshint.js","dummy/tests/integration/components/modal-dialog-test.js","dummy/tests/integration/components/modal-dialog-test.jscs-test.js","dummy/tests/integration/components/modal-dialog-test.jshint.js","dummy/tests/integration/components/object-list-view-test.js","dummy/tests/integration/components/object-list-view-test.jscs-test.js","dummy/tests/integration/components/object-list-view-test.jshint.js","dummy/tests/integration/components/ui-message-test.js","dummy/tests/integration/components/ui-message-test.jscs-test.js","dummy/tests/integration/components/ui-message-test.jshint.js","dummy/tests/locales/en/translations.jscs-test.js","dummy/tests/locales/en/translations.jshint.js","dummy/tests/locales/ru/translations.jscs-test.js","dummy/tests/locales/ru/translations.jshint.js","dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-field/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-field/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-file/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-file/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jshint.js","dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jshint.js","dummy/tests/models/ember-flexberry-dummy-application-user.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-application-user.jshint.js","dummy/tests/models/ember-flexberry-dummy-comment-vote.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-comment-vote.jshint.js","dummy/tests/models/ember-flexberry-dummy-comment.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-comment.jshint.js","dummy/tests/models/ember-flexberry-dummy-localization.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-localization.jshint.js","dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jshint.js","dummy/tests/models/ember-flexberry-dummy-parent.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-parent.jshint.js","dummy/tests/models/ember-flexberry-dummy-successor-phone.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-successor-phone.jshint.js","dummy/tests/models/ember-flexberry-dummy-successor-social-network.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-successor-social-network.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion-file.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion-file.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion-type.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion-type.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion.jshint.js","dummy/tests/models/ember-flexberry-dummy-toggler-example-detail.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-toggler-example-detail.jshint.js","dummy/tests/models/ember-flexberry-dummy-toggler-example-master.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-toggler-example-master.jshint.js","dummy/tests/models/ember-flexberry-dummy-vote.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-vote.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jshint.js","dummy/tests/models/integration-examples/edit-form/validation/base.jscs-test.js","dummy/tests/models/integration-examples/edit-form/validation/base.jshint.js","dummy/tests/models/integration-examples/edit-form/validation/detail.jscs-test.js","dummy/tests/models/integration-examples/edit-form/validation/detail.jshint.js","dummy/tests/models/integration-examples/edit-form/validation/master.jscs-test.js","dummy/tests/models/integration-examples/edit-form/validation/master.jshint.js","dummy/tests/resolver.jscs-test.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jscs-test.js","dummy/tests/router.jshint.js","dummy/tests/routes/application.jscs-test.js","dummy/tests/routes/application.jshint.js","dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jscs-test.js","dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jshint.js","dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jscs-test.js","dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jshint.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/base-operations.jscs-test.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/base-operations.jshint.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/date-format.jscs-test.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/date-format.jshint.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.jscs-test.js","dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.jshint.js","dummy/tests/routes/components-examples/flexberry-button/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-button/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-ddau-checkbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-ddau-checkbox/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-field/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-field/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-file/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-file/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-groupedit/configurate-row-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-groupedit/configurate-row-example.jshint.js","dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jshint.js","dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/autocomplete-order-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/autocomplete-order-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/default-ordering-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/default-ordering-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-menu/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-menu/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/hierarchy-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/hierarchy-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/object-list-view-resize.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/object-list-view-resize.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/selected-rows.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/selected-rows.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint.js","dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/configurate-rows.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/configurate-rows.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/custom-filter.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/custom-filter.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/limit-function-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/limit-function-example.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form/user.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form/user.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/selected-rows.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/selected-rows.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jshint.js","dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-toggler/ge-into-toggler-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-toggler/ge-into-toggler-example.jshint.js","dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-tree/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-tree/settings-example.jshint.js","dummy/tests/routes/components-examples/ui-message/settings-example.jscs-test.js","dummy/tests/routes/components-examples/ui-message/settings-example.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e.jshint.js","dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e/new.jshint.js","dummy/tests/routes/index.jscs-test.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/integration-examples/edit-form/readonly-mode.jscs-test.js","dummy/tests/routes/integration-examples/edit-form/readonly-mode.jshint.js","dummy/tests/routes/integration-examples/edit-form/validation.jscs-test.js","dummy/tests/routes/integration-examples/edit-form/validation.jshint.js","dummy/tests/routes/log-service-examples/clear-log-form.jscs-test.js","dummy/tests/routes/log-service-examples/clear-log-form.jshint.js","dummy/tests/routes/log-service-examples/settings-example.jscs-test.js","dummy/tests/routes/log-service-examples/settings-example.jshint.js","dummy/tests/routes/user-setting-forms/user-setting-delete.jscs-test.js","dummy/tests/routes/user-setting-forms/user-setting-delete.jshint.js","dummy/tests/serializers/application.jscs-test.js","dummy/tests/serializers/application.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-application-user.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-application-user.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-comment.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-comment.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-localization.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-localization.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-parent.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-parent.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-successor-phone.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-successor-phone.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-successor-social-network.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-successor-social-network.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-toggler-example-detail.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-toggler-example-detail.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-toggler-example-master.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-toggler-example-master.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-vote.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-vote.jshint.js","dummy/tests/services/store.jscs-test.js","dummy/tests/services/store.jshint.js","dummy/tests/services/user-settings.jscs-test.js","dummy/tests/services/user-settings.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jscs-test.js","dummy/tests/test-helper.jshint.js","dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint.js","dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jshint.js","dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint.js","dummy/tests/transforms/ember-flexberry-dummy-gender.jscs-test.js","dummy/tests/transforms/ember-flexberry-dummy-gender.jshint.js","dummy/tests/transforms/ember-flexberry-dummy-vote-type.jscs-test.js","dummy/tests/transforms/ember-flexberry-dummy-vote-type.jshint.js","dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jscs-test.js","dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jshint.js","dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jscs-test.js","dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jshint.js","dummy/tests/unit/adapters/application-test.js","dummy/tests/unit/adapters/application-test.jscs-test.js","dummy/tests/unit/adapters/application-test.jshint.js","dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test.jscs-test.js","dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test.jshint.js","dummy/tests/unit/controllers/application-test.js","dummy/tests/unit/controllers/application-test.jscs-test.js","dummy/tests/unit/controllers/application-test.jshint.js","dummy/tests/unit/controllers/detail-edit-form-test.js","dummy/tests/unit/controllers/detail-edit-form-test.jscs-test.js","dummy/tests/unit/controllers/detail-edit-form-test.jshint.js","dummy/tests/unit/controllers/edit-form-test.js","dummy/tests/unit/controllers/edit-form-test.jscs-test.js","dummy/tests/unit/controllers/edit-form-test.jshint.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jscs-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jshint.js","dummy/tests/unit/controllers/list-form-test.js","dummy/tests/unit/controllers/list-form-test.jscs-test.js","dummy/tests/unit/controllers/list-form-test.jshint.js","dummy/tests/unit/controllers/lookup-dialog-test.js","dummy/tests/unit/controllers/lookup-dialog-test.jscs-test.js","dummy/tests/unit/controllers/lookup-dialog-test.jshint.js","dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.jscs-test.js","dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.jshint.js","dummy/tests/unit/helpers/readonly-cell-test.js","dummy/tests/unit/helpers/readonly-cell-test.jscs-test.js","dummy/tests/unit/helpers/readonly-cell-test.jshint.js","dummy/tests/unit/initializers/i18n-test.js","dummy/tests/unit/initializers/i18n-test.jscs-test.js","dummy/tests/unit/initializers/i18n-test.jshint.js","dummy/tests/unit/initializers/render-perf-logger-test.js","dummy/tests/unit/initializers/render-perf-logger-test.jscs-test.js","dummy/tests/unit/initializers/render-perf-logger-test.jshint.js","dummy/tests/unit/instance-initializers/i18n-test.js","dummy/tests/unit/instance-initializers/i18n-test.jscs-test.js","dummy/tests/unit/instance-initializers/i18n-test.jshint.js","dummy/tests/unit/instance-initializers/lock-test.js","dummy/tests/unit/instance-initializers/lock-test.jscs-test.js","dummy/tests/unit/instance-initializers/lock-test.jshint.js","dummy/tests/unit/instance-initializers/moment-test.js","dummy/tests/unit/instance-initializers/moment-test.jscs-test.js","dummy/tests/unit/instance-initializers/moment-test.jshint.js","dummy/tests/unit/mixins/dynamic-actions-test.js","dummy/tests/unit/mixins/dynamic-actions-test.jscs-test.js","dummy/tests/unit/mixins/dynamic-actions-test.jshint.js","dummy/tests/unit/mixins/dynamic-properties-test.js","dummy/tests/unit/mixins/dynamic-properties-test.jscs-test.js","dummy/tests/unit/mixins/dynamic-properties-test.jshint.js","dummy/tests/unit/mixins/flexberry-file-controller-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.jshint.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.jshint.js","dummy/tests/unit/mixins/lock-route-test.js","dummy/tests/unit/mixins/lock-route-test.jscs-test.js","dummy/tests/unit/mixins/lock-route-test.jshint.js","dummy/tests/unit/mixins/modal-application-route-test.js","dummy/tests/unit/mixins/modal-application-route-test.jscs-test.js","dummy/tests/unit/mixins/modal-application-route-test.jshint.js","dummy/tests/unit/mixins/paginated-controller-test.js","dummy/tests/unit/mixins/paginated-controller-test.jscs-test.js","dummy/tests/unit/mixins/paginated-controller-test.jshint.js","dummy/tests/unit/mixins/paginated-route-test.js","dummy/tests/unit/mixins/paginated-route-test.jscs-test.js","dummy/tests/unit/mixins/paginated-route-test.jshint.js","dummy/tests/unit/mixins/predicate-from-filters-test.js","dummy/tests/unit/mixins/predicate-from-filters-test.jscs-test.js","dummy/tests/unit/mixins/predicate-from-filters-test.jshint.js","dummy/tests/unit/mixins/reload-list-mixin-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.jscs-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.jshint.js","dummy/tests/unit/mixins/sortable-controller-test.js","dummy/tests/unit/mixins/sortable-controller-test.jscs-test.js","dummy/tests/unit/mixins/sortable-controller-test.jshint.js","dummy/tests/unit/mixins/sortable-route-test.js","dummy/tests/unit/mixins/sortable-route-test.jscs-test.js","dummy/tests/unit/mixins/sortable-route-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/models/new-platform-flexberry-services-lock-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-services-lock-test.jshint.js","dummy/tests/unit/routes/application-test.js","dummy/tests/unit/routes/application-test.jscs-test.js","dummy/tests/unit/routes/application-test.jshint.js","dummy/tests/unit/routes/edit-form-new-test.js","dummy/tests/unit/routes/edit-form-new-test.jscs-test.js","dummy/tests/unit/routes/edit-form-new-test.jshint.js","dummy/tests/unit/routes/edit-form-test.js","dummy/tests/unit/routes/edit-form-test.jscs-test.js","dummy/tests/unit/routes/edit-form-test.jshint.js","dummy/tests/unit/routes/list-form-test.js","dummy/tests/unit/routes/list-form-test.jscs-test.js","dummy/tests/unit/routes/list-form-test.jshint.js","dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.js","dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.jscs-test.js","dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.jshint.js","dummy/tests/unit/routes/projected-model-form-test.js","dummy/tests/unit/routes/projected-model-form-test.jscs-test.js","dummy/tests/unit/routes/projected-model-form-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.js","dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.jshint.js","dummy/tests/unit/services/detail-interaction-test.js","dummy/tests/unit/services/detail-interaction-test.jscs-test.js","dummy/tests/unit/services/detail-interaction-test.jshint.js","dummy/tests/unit/services/form-load-time-tracker-test.js","dummy/tests/unit/services/form-load-time-tracker-test.jscs-test.js","dummy/tests/unit/services/form-load-time-tracker-test.jshint.js","dummy/tests/unit/services/log-test.js","dummy/tests/unit/services/log-test.jscs-test.js","dummy/tests/unit/services/log-test.jshint.js","dummy/tests/unit/services/objectlistview-events-test.js","dummy/tests/unit/services/objectlistview-events-test.jscs-test.js","dummy/tests/unit/services/objectlistview-events-test.jshint.js","dummy/tests/unit/utils/deserialize-sorting-param-test.js","dummy/tests/unit/utils/deserialize-sorting-param-test.jscs-test.js","dummy/tests/unit/utils/deserialize-sorting-param-test.jshint.js","dummy/tests/unit/utils/get-current-agregator-test.js","dummy/tests/unit/utils/get-current-agregator-test.jscs-test.js","dummy/tests/unit/utils/get-current-agregator-test.jshint.js","dummy/tests/unit/utils/need-save-current-agregator-test.js","dummy/tests/unit/utils/need-save-current-agregator-test.jscs-test.js","dummy/tests/unit/utils/need-save-current-agregator-test.jshint.js","dummy/tests/unit/utils/serialize-sorting-param-test.js","dummy/tests/unit/utils/serialize-sorting-param-test.jscs-test.js","dummy/tests/unit/utils/serialize-sorting-param-test.jshint.js","dummy/tests/unit/utils/string-test.js","dummy/tests/unit/utils/string-test.jscs-test.js","dummy/tests/unit/utils/string-test.jshint.js","dummy/tests/views/application.jscs-test.js","dummy/tests/views/application.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check checkbox at editform', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox';\n    visit(path);\n    andThen(function () {\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $folvContainer = _ember['default'].$('.object-list-view-container');\n      var $trTableBody = _ember['default'].$('table.object-list-view tbody tr', $folvContainer);\n      var $cell = $trTableBody[0].children[1];\n\n      $cell.click();\n\n      var timeout = 500;\n      _ember['default'].run.later(function () {\n        controller.set('rowClickable', true);\n        _ember['default'].run.later(function () {\n          var asyncOperationsCompleted = assert.async();\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($cell, 'form.flexberry-vertical-form', '.field').then(function ($editForm) {\n            var checkbox = _ember['default'].$('.flexberry-checkbox');\n\n            assert.ok($editForm, 'edit form open');\n            assert.equal(checkbox.hasClass('checked'), true, 'checkbox is check');\n          })['catch'](function (reason) {\n            throw new Error(reason);\n          })['finally'](function () {\n            asyncOperationsCompleted();\n          });\n        }, timeout);\n      }, timeout);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/checkbox-at-editform-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', ['exports', 'ember', 'qunit', 'dummy/tests/helpers/start-app'], function (exports, _ember, _qunit, _dummyTestsHelpersStartApp) {\n  exports.executeTest = executeTest;\n\n  function executeTest(testName, callback) {\n    var app = undefined;\n    var store = undefined;\n    var userSettingsService = undefined;\n\n    (0, _qunit.module)('Acceptance | flexberry-objectlistview | ' + testName, {\n      beforeEach: function beforeEach() {\n\n        // Start application.\n        app = (0, _dummyTestsHelpersStartApp['default'])();\n\n        // Enable acceptance test mode in application controller (to hide unnecessary markup from application.hbs).\n        var applicationController = app.__container__.lookup('controller:application');\n        applicationController.set('isInAcceptanceTestMode', true);\n        store = app.__container__.lookup('service:store');\n\n        userSettingsService = app.__container__.lookup('service:user-settings');\n        var getCurrentPerPage = function getCurrentPerPage() {\n          return 5;\n        };\n\n        userSettingsService.set('getCurrentPerPage', getCurrentPerPage);\n      },\n\n      afterEach: function afterEach() {\n        _ember['default'].run(app, 'destroy');\n      }\n    });\n\n    (0, _qunit.test)(testName, function (assert) {\n      return callback(store, assert, app);\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/execute-folv-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/execute-folv-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/execute-folv-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/execute-folv-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions) {\n\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  // Need to add sort by multiple columns.\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check select all at all page', function (store, assert, app) {\n    assert.expect(10);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = _ember['default'].get(controller, 'modelProjection');\n\n      var $olv = _ember['default'].$('.object-list-view ');\n      var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n\n      _ember['default'].run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, null).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            var done1 = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n\n              assert.ok($list);\n\n              var $checkAllButton = _ember['default'].$('.check-all-button');\n              $checkAllButton.click();\n              var $checkAllAtPageButton = _ember['default'].$('.check-all-at-page-button');\n              var $checkCheckBox = _ember['default'].$('.flexberry-checkbox.checked.read-only');\n              var $deleteButton = _ember['default'].$('.delete-button');\n\n              // Check afther select all.\n              assert.equal($checkAllAtPageButton.hasClass('disabled'), true, 'select all at page aren\\'t available');\n              assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select and readOnly');\n              assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n              $checkAllButton.click();\n              $checkCheckBox = _ember['default'].$('.flexberry-checkbox.checked.read-only');\n\n              // Check afther unselect all.\n              assert.equal($checkAllAtPageButton.hasClass('disabled'), false, 'select all at page are available');\n              assert.equal($checkCheckBox.length, 0, 'all checkBox in row are select and readOnly');\n              assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-all-page-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions) {\n\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  // Need to add sort by multiple columns.\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check select all at page', function (store, assert, app) {\n    assert.expect(8);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = _ember['default'].get(controller, 'modelProjection');\n\n      var $olv = _ember['default'].$('.object-list-view ');\n      var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n\n      _ember['default'].run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, null).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            var done1 = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n\n              assert.ok($list);\n\n              var $checkAllAtPageButton = _ember['default'].$('.check-all-at-page-button');\n              $checkAllAtPageButton.click();\n              var $deleteButton = _ember['default'].$('.delete-button');\n              var $checkCheckBox = _ember['default'].$('.flexberry-checkbox.checked');\n\n              // Check afther select all at page.\n              assert.equal($checkCheckBox.length, 5, 'all checkBox in row are select');\n              assert.equal($deleteButton.hasClass('disabled'), false, 'delete are available');\n\n              $checkAllAtPageButton.click();\n              $checkCheckBox = _ember['default'].$('.flexberry-checkbox.checked');\n\n              // Check afther unselect all at page.\n              assert.equal($checkCheckBox.length, 0, 'all checkBox in row are unselect');\n              assert.equal($deleteButton.hasClass('disabled'), true, 'delete aren\\'t available');\n\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-check-all-at-page-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('test checking', function (store, assert, app) {\n    assert.expect(2);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var $folvContainer = _ember['default'].$('.object-list-view-container');\n      var $row = _ember['default'].$('table.object-list-view tbody tr', $folvContainer).first();\n\n      // Мark first record.\n      var $firstCell = _ember['default'].$('.object-list-view-helper-column-cell', $row);\n      var $checkboxInRow = _ember['default'].$('.flexberry-checkbox', $firstCell);\n\n      $checkboxInRow.click();\n      andThen(function () {\n        var recordIsChecked = $checkboxInRow[0].className.indexOf('checked') >= 0;\n        assert.ok(recordIsChecked, 'First row is checked');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-checked-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-checked-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-checked-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-checked-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-checked-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesRuTranslations) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('date format moment L', function (store, assert, app) {\n    assert.expect(7);\n    var done = assert.async();\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n\n        var olvContainerClass = '.object-list-view-container';\n        var trTableClass = 'table.object-list-view tbody tr';\n\n        var $toolBar = _ember['default'].$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n        var $refreshButton = $toolBarButtons[0];\n        assert.equal($refreshButton.innerText.trim(), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($refreshButton, olvContainerClass, trTableClass).then(function ($list) {\n          assert.ok($list, 'list loaded');\n\n          var moment = app.__container__.lookup('service:moment');\n          var momentValue = _ember['default'].get(moment, 'defaultFormat');\n\n          assert.equal(momentValue, 'L', 'moment value is \\'L\\' ');\n\n          var $folvContainer = _ember['default'].$(olvContainerClass);\n          var $table = _ember['default'].$('table.object-list-view', $folvContainer);\n          var $headRow = _ember['default'].$('thead tr', $table)[0].children;\n\n          var indexDate = function indexDate() {\n            var toReturn = undefined;\n            Object.keys($headRow).forEach(function (element, index, array) {\n              if (_ember['default'].$.trim($headRow[element].innerText) === 'Date') {\n                toReturn = index;\n                return false;\n              }\n            });\n\n            return toReturn;\n          };\n\n          var $dateCell = function $dateCell() {\n            return _ember['default'].$.trim(_ember['default'].$('tbody tr', $table)[0].children[indexDate()].innerText);\n          };\n\n          // Date format most be DD.MM.YYYY\n          var dateFormatRuRe = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d/;\n          var findDateRu = dateFormatRuRe.exec($dateCell());\n\n          assert.ok(findDateRu, 'date format is \\'DD.MM.YYYY\\' ');\n\n          var done2 = assert.async();\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n            var done1 = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($refreshButton, olvContainerClass, trTableClass).then(function ($list) {\n              assert.ok($list, 'list loaded');\n\n              // Date format most be MM/DD/YYYY:\n              var dateFormatEnRe = /(0[1-9]|1[012])\\/(0[1-9]|[12][0-9]|3[01])\\/(19|20)\\d\\d/;\n              var dataCellStr = $dateCell();\n\n              var findDateEn = dateFormatEnRe.exec(dataCellStr);\n\n              assert.ok(findDateEn, 'date format is \\'MM/DD/YYYY\\' ');\n            })['catch'](function (reason) {\n              throw new Error(reason);\n            })['finally'](function () {\n              done1();\n            });\n            done2();\n          });\n          done();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-date-format-moment-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _emberFlexberryDataUtilsGenerateUniqueId, _emberFlexberryData) {\n  var Builder = _emberFlexberryData.Query.Builder;\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check delete button in row', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 1;\n    var uuid = '0' + (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])();\n\n    // Add records for deliting.\n    _ember['default'].run(function () {\n      var newRecord = store.createRecord(modelName, { name: uuid });\n      var done1 = assert.async();\n\n      newRecord.save().then(function () {\n        var builder = new Builder(store).from(modelName).count();\n        var done = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = _ember['default'].$(olvContainerClass);\n            var $rows = function $rows() {\n              return _ember['default'].$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, element) {\n              var nameRecord = _ember['default'].$.trim(element.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' record added');\n\n            $rows().forEach(function (element, i, arr) {\n              var nameRecord = _ember['default'].$.trim(element.children[1].innerText);\n              if (nameRecord.indexOf(uuid) >= 0) {\n                var $deleteBtnInRow = _ember['default'].$('.object-list-view-row-delete-button', element);\n                $deleteBtnInRow.click();\n              }\n            });\n\n            // Check that the records have been removed.\n            var recordsIsDeleteBtnInRow = $rows().every(function (element) {\n              var nameRecord = _ember['default'].$.trim(element.children[1].innerText);\n              return nameRecord.indexOf(uuid) < 0;\n            });\n\n            assert.ok(recordsIsDeleteBtnInRow, 'Each entry begins with \\'' + uuid + '\\' is delete with button in row');\n\n            // Check that the records have been removed into store.\n            var builder2 = new Builder(store, modelName).where('name', _emberFlexberryData.Query.FilterOperator.Eq, uuid).count();\n            var timeout = 500;\n            _ember['default'].run.later(function () {\n              var done2 = assert.async();\n              store.query(modelName, builder2.build()).then(function (result) {\n                assert.notOk(result.meta.count, 'record \\'' + uuid + '\\'not found in store');\n                done2();\n              });\n            }, timeout);\n          });\n          done();\n        });\n        done1();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-in-row-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id', 'ember-flexberry-data'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryDataUtilsGenerateUniqueId, _emberFlexberryData) {\n  var Builder = _emberFlexberryData.Query.Builder;\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check delete using button on toolbar', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var howAddRec = 2;\n    var uuid = '0' + (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])();\n\n    // Add records for deliting.\n    _ember['default'].run(function () {\n      var newRecords = _ember['default'].A();\n\n      for (var i = 0; i < howAddRec; i++) {\n        newRecords.pushObject(store.createRecord('ember-flexberry-dummy-suggestion-type', { name: uuid }));\n      }\n\n      var done2 = assert.async();\n      var promises = _ember['default'].A();\n      newRecords.forEach(function (item) {\n        promises.push(item.save());\n      });\n\n      _ember['default'].RSVP.Promise.all(promises).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        var builder = new Builder(store).from(modelName).count();\n        var done1 = assert.async();\n        store.query(modelName, builder.build()).then(function (result) {\n          visit(path + '?perPage=' + result.meta.count);\n          andThen(function () {\n            assert.equal(currentPath(), path);\n            var olvContainerClass = '.object-list-view-container';\n            var trTableClass = 'table.object-list-view tbody tr';\n\n            var $folvContainer = _ember['default'].$(olvContainerClass);\n            var $rows = function $rows() {\n              return _ember['default'].$(trTableClass, $folvContainer).toArray();\n            };\n\n            // Check that the records have been added.\n            var recordIsForDeleting = $rows().reduce(function (sum, current) {\n              var nameRecord = _ember['default'].$.trim(current.children[1].innerText);\n              var flag = nameRecord.indexOf(uuid) >= 0;\n              return sum + flag;\n            }, 0);\n\n            assert.equal(recordIsForDeleting, howAddRec, howAddRec + ' records added');\n\n            // Мark records.\n            var recordIsChecked = $rows().reduce(function (sum, current) {\n              var nameRecord = _ember['default'].$.trim(current.children[1].innerText);\n              var $firstCell = _ember['default'].$('.object-list-view-helper-column-cell', current);\n              var checkboxInRow = _ember['default'].$('.flexberry-checkbox', $firstCell);\n              var checked = true;\n              if (nameRecord.indexOf(uuid) >= 0) {\n                checkboxInRow.click();\n                checked = checkboxInRow[0].className.indexOf('checked') >= 0;\n              }\n\n              return sum && checked;\n            }, true);\n\n            assert.ok(recordIsChecked, 'Each entry begins with \\'' + uuid + '\\' is checked');\n\n            var $toolBar = _ember['default'].$('.ui.secondary.menu')[0];\n            var $deleteButton = $toolBar.children[2];\n            var done = assert.async();\n\n            // Delete the marked records.\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($deleteButton, olvContainerClass, trTableClass).then(function ($list) {\n              var recordsIsDelete = $rows().every(function (element) {\n                var nameRecord = _ember['default'].$.trim(element.children[1].innerText);\n                return nameRecord.indexOf(uuid) < 0;\n              });\n\n              assert.ok(recordsIsDelete, 'Each entry begins with \\'' + uuid + '\\' is delete with button in toolbar button');\n\n              // Check that the records have been removed into store.\n              var builder2 = new Builder(store).from(modelName).where('name', _emberFlexberryData.Query.FilterOperator.Eq, uuid).count();\n              var done3 = assert.async();\n              store.query(modelName, builder2.build()).then(function (result) {\n                assert.notOk(result.meta.count, 'records \\'' + uuid + '\\'not found in store');\n                done3();\n              });\n              done();\n            });\n          });\n          done1();\n        });\n        done2();\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-delete-button-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-delete-button-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-delete-button-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-delete-button-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest) {\n\n  // Need to add sort by multiple columns.\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check edit button in row', function (store, assert, app) {\n    assert.expect(3);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n\n      var $editButtonInRow = _ember['default'].$('.object-list-view-row-edit-button');\n\n      assert.equal($editButtonInRow.length, 5, 'All row have editButton');\n\n      var $button = $editButtonInRow[0];\n      $button.click();\n\n      var done = assert.async();\n\n      window.setTimeout(function () {\n        var saveButton = _ember['default'].$('.save-button');\n        assert.equal(saveButton.length, 1, 'Edit button in row open editform');\n        done();\n      }, 1000);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-edit-button-in-row-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/en/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesEnTranslations) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check getCellComponent', function (store, assert, app) {\n    assert.expect(7);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/date-format';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      // Set 'en' as current locale.\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n        var olvContainerClass = '.object-list-view-container';\n        var trTableClass = 'table.object-list-view tbody tr';\n\n        var controller = app.__container__.lookup('controller:' + currentRouteName());\n\n        var $folvContainer = _ember['default'].$('.object-list-view-container');\n        var $table = _ember['default'].$('table.object-list-view', $folvContainer);\n\n        var $headRow = _ember['default'].$('thead tr', $table)[0].children;\n\n        var indexDate = function indexDate() {\n          var toReturn = undefined;\n          Object.keys($headRow).forEach(function (element, index, array) {\n            if (_ember['default'].$.trim($headRow[element].innerText) === 'Date') {\n              toReturn = index;\n              return false;\n            }\n          });\n          return toReturn;\n        };\n\n        var $dateCell = function $dateCell() {\n          return _ember['default'].$.trim(_ember['default'].$('tbody tr', $table)[0].children[indexDate()].innerText);\n        };\n\n        var myRe = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;\n\n        // Date format most be YYYY-MM-DD.\n        var myArray = myRe.exec($dateCell());\n\n        var result = myArray ? myArray[0] : null;\n        assert.ok(result, 'date format is \\'YYYY-MM-DD\\' ');\n\n        controller.set('dateFormat', '2');\n        var $toolBar = _ember['default'].$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n        var $refreshButton = $toolBarButtons[0];\n        assert.equal($refreshButton.innerText.trim(), _ember['default'].get(_emberFlexberryLocalesEnTranslations['default'], 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n\n        var timeout = 500;\n        _ember['default'].run.later(function () {\n          var done = assert.async();\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($refreshButton, olvContainerClass, trTableClass).then(function ($list) {\n            assert.ok($list, 'list loaded');\n\n            // Date format most be DD.MM.YYYY, hh:mm:ss.\n            var reDateTime = /(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.(19|20)\\d\\d\\, ([0-1]\\d|2[0-3])(:[0-5]\\d){2}$/;\n            var arrayDateTime = reDateTime.exec($dateCell());\n\n            var resultDateTime = arrayDateTime ? arrayDateTime[0] : null;\n            assert.ok(resultDateTime, 'date format is \\'DD.MM.YYYY, hh:mm:ss\\' ');\n            controller.set('dateFormat', '3');\n\n            var done2 = assert.async();\n            _ember['default'].run.later(function () {\n              var done1 = assert.async();\n              (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($refreshButton, olvContainerClass, trTableClass).then(function ($list) {\n                assert.ok($list, 'list loaded');\n\n                // Date format most be II (example Sep 4 1986).\n                var reDateString = /[a-zA-Z]{3} ([1-9]|[12][0-9]|3[01])\\, (19|20)\\d\\d/;\n                var arrayDateString = reDateString.exec($dateCell());\n\n                var resultDateString = arrayDateString ? arrayDateString[0] : null;\n                assert.ok(resultDateString, 'date format is \\'ll\\' ');\n                done1();\n              });\n              done2();\n            }, timeout);\n            done();\n          });\n        }, timeout);\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-getCellComponent-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check goto editform', function (store, assert, app) {\n    assert.expect(5);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var $folvContainer = _ember['default'].$('.object-list-view-container');\n      var $trTableBody = _ember['default'].$('table.object-list-view tbody tr', $folvContainer);\n      var $cell = $trTableBody[0].children[1];\n\n      assert.equal(currentPath(), path, 'edit form not open');\n      $cell.click();\n\n      var timeout = 500;\n      _ember['default'].run.later(function () {\n        assert.equal(currentPath(), path, 'edit form not open');\n        controller.set('rowClickable', true);\n        _ember['default'].run.later(function () {\n          var asyncOperationsCompleted = assert.async();\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($cell, 'form.flexberry-vertical-form', '.field').then(function ($editForm) {\n            assert.ok($editForm, 'edit form open');\n            assert.equal(currentPath(), 'ember-flexberry-dummy-suggestion-edit', 'edit form path');\n          })['catch'](function (reason) {\n            throw new Error(reason);\n          })['finally'](function () {\n            asyncOperationsCompleted();\n          });\n        }, timeout);\n      }, timeout);\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-goto-editform-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-goto-editform-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check locale change', function (store, assert, app) {\n    assert.expect(11);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      function toolbarBtnTextAssert(currentLocale) {\n        assert.notEqual($toolBarButtons.length, 0, 'buttons in toolbar exists');\n        assert.equal($toolBarButtons[0].innerText.trim(), _ember['default'].get(currentLocale, 'components.olv-toolbar.refresh-button-text'), 'button refresh exist');\n        assert.equal($toolBarButtons[1].innerText.trim(), _ember['default'].get(currentLocale, 'components.olv-toolbar.add-button-text'), 'button create exist');\n        assert.equal($toolBarButtons[2].innerText.trim(), _ember['default'].get(currentLocale, 'components.olv-toolbar.delete-button-text'), 'button delete exist');\n        assert.equal($($toolBarButtons[2]).hasClass('disabled'), true, 'button delete is disabled');\n      }\n\n      var $toolBar = _ember['default'].$('.ui.secondary.menu')[0];\n      var $toolBarButtons = $toolBar.children;\n\n      // Set 'ru' as current locale.\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n        toolbarBtnTextAssert(_emberFlexberryLocalesRuTranslations['default']);\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('en', app).then(function () {\n          toolbarBtnTextAssert(_emberFlexberryLocalesEnTranslations['default']);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-locales-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-locales-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-locales-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-locales-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-locales-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesRuTranslations) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check goto new form', function (store, assert, app) {\n    assert.expect(4);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Set 'ru' as current locale.\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n        assert.equal(currentPath(), path);\n        var $toolBar = _ember['default'].$('.ui.secondary.menu')[0];\n        var $toolBarButtons = $toolBar.children;\n\n        assert.equal($toolBarButtons[1].innerText, _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.olv-toolbar.add-button-text'), 'button create exist');\n\n        var asyncOperationsCompleted = assert.async();\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($toolBarButtons[1], 'form', '.field').then(function ($editForm) {\n          assert.ok($editForm, 'new form open');\n          assert.equal(currentPath(), 'ember-flexberry-dummy-suggestion-edit.new', 'new form open');\n        })['catch'](function (reason) {\n          throw new Error(reason);\n        })['finally'](function () {\n          asyncOperationsCompleted();\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-open-newform-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-open-newform-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-open-newform-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-open-newform-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-open-newform-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryDataUtilsGenerateUniqueId) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check paging dropdown', function (store, assert, app) {\n    assert.expect(7);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])();\n\n    // Add records for paging.\n    _ember['default'].run(function () {\n\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        visit(path);\n        andThen(function () {\n          assert.equal(currentPath(), path);\n\n          var $folvPerPageButton = _ember['default'].$('.flexberry-dropdown.compact');\n          var $menu = _ember['default'].$('.menu', $folvPerPageButton);\n          var trTableBody = function trTableBody() {\n            return $(_ember['default'].$('table.object-list-view tbody tr')).length.toString();\n          };\n\n          var activeItem = function activeItem() {\n            return $(_ember['default'].$('.item.active.selected', $menu)).attr('data-value');\n          };\n\n          // The list should be more than 5 items.\n          assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n          $folvPerPageButton.click();\n          var timeout = 500;\n          _ember['default'].run.later(function () {\n            var menuIsVisible = $menu.hasClass('visible');\n            assert.strictEqual(menuIsVisible, true, 'menu is visible');\n            var $choosedIthem = _ember['default'].$('.item', $menu);\n            var done = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($choosedIthem[1], '.object-list-view-container', 'table.object-list-view tbody tr').then(function ($list) {\n              assert.ok($list);\n              assert.equal(activeItem(), $($choosedIthem[1]).attr('data-value'), 'equal');\n\n              // The list should be more than 10 items\n              assert.equal(activeItem(), trTableBody(), 'equal perPage and visible element count');\n            })['catch'](function (reason) {\n              throw new Error(reason);\n            })['finally'](function () {\n              (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n              done();\n            });\n          }, timeout);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-dropdown-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry-data/utils/generate-unique-id'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryDataUtilsGenerateUniqueId) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check paging nav', function (store, assert) {\n    assert.expect(7);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/folv-paging';\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var uuid = (0, _emberFlexberryDataUtilsGenerateUniqueId['default'])();\n\n    // Add records for paging.\n    _ember['default'].run(function () {\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.addRecords)(store, modelName, uuid).then(function (resolvedPromises) {\n        assert.ok(resolvedPromises, 'All records saved.');\n\n        visit(path);\n        andThen(function () {\n          assert.equal(currentPath(), path);\n\n          // check paging.\n          var $basicButtons = _ember['default'].$('.ui.button', '.ui.basic.buttons');\n          assert.equal($($basicButtons[0]).hasClass('disabled'), true, 'button prev is disabled');\n          assert.equal($($basicButtons[1]).hasClass('active'), true, 'page 1 is active');\n\n          var done = assert.async();\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($basicButtons[2], '.object-list-view-container', 'table.object-list-view tbody tr').then(function ($list) {\n            assert.ok($list);\n            var $basicButtons = _ember['default'].$('.ui.button', '.ui.basic.buttons');\n            assert.equal($($basicButtons[1]).hasClass('active'), false, 'page 1 is not active');\n            assert.equal($($basicButtons[2]).hasClass('active'), true, 'page 2 is active');\n          })['catch'](function (reason) {\n            throw new Error(reason);\n          })['finally'](function () {\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.deleteRecords)(store, modelName, uuid, assert);\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-paging-navigation-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesRuTranslations) {\n\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  // Need to add sort by multiple columns.\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check sorting clear', function (store, assert, app) {\n    assert.expect(9);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = _ember['default'].get(controller, 'modelProjection');\n\n      var $olv = _ember['default'].$('.object-list-view ');\n      var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n\n      _ember['default'].run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, null).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            var done1 = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n              var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n              var $ord = _ember['default'].$('.object-list-view-order-icon', $thead);\n              var $divOrd = _ember['default'].$('div', $ord);\n\n              assert.ok($list);\n              assert.equal($divOrd.attr('title'), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(_ember['default'].$.trim($divOrd.text()), String.fromCharCode('9650') + '1', 'sorting symbol added');\n\n              var done2 = assert.async();\n              (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n\n                var $clearButton = _ember['default'].$('.clear-sorting-button');\n                $clearButton.click();\n\n                var done3 = assert.async();\n\n                window.setTimeout(function () {\n                  var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n                  var $ord = _ember['default'].$('.object-list-view-order-icon', $thead);\n                  var $divOrd = _ember['default'].$('div', $ord);\n\n                  assert.equal($divOrd.attr('title'), undefined, 'sorting are clear');\n                  assert.equal(_ember['default'].$.trim($divOrd.text()), '', 'sorting symbol delete');\n\n                  done3();\n                }, 3000);\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-clear-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', 'ember-flexberry/locales/ru/translations'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions, _emberFlexberryLocalesRuTranslations) {\n\n  var olvContainerClass = '.object-list-view-container';\n  var trTableClass = 'table.object-list-view tbody tr';\n\n  // Need to add sort by multiple columns.\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check sorting', function (store, assert, app) {\n    assert.expect(11);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n\n      // Check page path.\n      assert.equal(currentPath(), path);\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = _ember['default'].get(controller, 'modelProjection');\n\n      var $olv = _ember['default'].$('.object-list-view ');\n      var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n\n      _ember['default'].run(function () {\n        var done = assert.async();\n\n        // Check sortihg in the first column. Sorting is not append.\n        (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('ru', app).then(function () {\n          (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, null).then(function (isTrue) {\n            assert.ok(isTrue, 'sorting is not applied');\n\n            // Check sortihg icon in the first column. Sorting icon is not added.\n            assert.equal($thead.children[0].children.length, 1, 'no sorting icon in the first column');\n            var done1 = assert.async();\n            (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n              var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n              var $ord = _ember['default'].$('.object-list-view-order-icon', $thead);\n              var $divOrd = _ember['default'].$('div', $ord);\n\n              assert.ok($list);\n              assert.equal($divOrd.attr('title'), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.object-list-view.sort-ascending'), 'title is Order ascending');\n              assert.equal(_ember['default'].$.trim($divOrd.text()), String.fromCharCode('9650') + '1', 'sorting symbol added');\n\n              var done2 = assert.async();\n              (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address asc').then(function (isTrue) {\n                assert.ok(isTrue, 'sorting applied');\n                var done3 = assert.async();\n                (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingList)($thead, olvContainerClass, trTableClass).then(function ($list) {\n                  var $thead = _ember['default'].$('th.dt-head-left', $olv)[0];\n                  var $ord = _ember['default'].$('.object-list-view-order-icon', $thead);\n                  var $divOrd = _ember['default'].$('div', $ord);\n\n                  assert.ok($list);\n\n                  assert.equal($divOrd.attr('title'), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.object-list-view.sort-descending'), 'title is Order descending');\n                  assert.equal(_ember['default'].$.trim($divOrd.text()), String.fromCharCode('9660') + '1', 'sorting symbol changed');\n\n                  var done4 = assert.async();\n                  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName, $olv, 'address desc').then(function (isTrue) {\n                    assert.ok(isTrue, 'sorting applied');\n                    done4();\n                  });\n                })['finally'](function () {\n                  done3();\n                });\n                done2();\n              });\n              done1();\n            });\n            done();\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-sorting-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-sorting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-sorting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-sorting-test.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions', ['exports', 'ember', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryData) {\n  exports.loadingList = loadingList;\n  exports.checkSortingList = checkSortingList;\n  exports.addRecords = addRecords;\n  exports.deleteRecords = deleteRecords;\n  exports.loadingLocales = loadingLocales;\n\n  // Function for waiting list loading.\n\n  function loadingList($ctrlForClick, list, records) {\n    return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      var checkIntervalId = undefined;\n      var checkIntervalSucceed = false;\n      var checkInterval = 500;\n      var timeout = 10000;\n\n      _ember['default'].run(function () {\n        $ctrlForClick.click();\n      });\n\n      _ember['default'].run(function () {\n        checkIntervalId = window.setInterval(function () {\n          var $list = _ember['default'].$(list);\n          var $records = _ember['default'].$(records, $list);\n          if ($records.length === 0) {\n\n            // Data isn't loaded yet.\n            return;\n          }\n\n          // Data is loaded.\n          // Stop interval & resolve promise.\n          window.clearInterval(checkIntervalId);\n          checkIntervalSucceed = true;\n          resolve($list);\n        }, checkInterval);\n      });\n\n      // Set wait timeout.\n      _ember['default'].run(function () {\n        window.setTimeout(function () {\n          if (checkIntervalSucceed) {\n            return;\n          }\n\n          // Time is out.\n          // Stop intervals & reject promise.\n          window.clearInterval(checkIntervalId);\n          reject('editForm load operation is timed out');\n        }, timeout);\n      });\n    });\n  }\n\n  // Function for check sorting.\n\n  function checkSortingList(store, projection, $olv, ordr) {\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      _ember['default'].run(function () {\n        var modelName = projection.modelName;\n        var builder = new _emberFlexberryData.Query.Builder(store).from(modelName).selectByProjection(projection.projectionName);\n        builder = !ordr ? builder : builder.orderBy(ordr);\n        store.query(modelName, builder.build()).then(function (records) {\n          var recordsArr = records.toArray();\n          var $tr = _ember['default'].$('table.object-list-view tbody tr').toArray();\n\n          var isTrue = $tr.reduce(function (sum, current, i) {\n            var expectVal = !recordsArr[i].get('address') ? '' : recordsArr[i].get('address');\n            return sum && _ember['default'].$.trim(current.children[1].innerText) === expectVal;\n          }, true);\n\n          resolve(isTrue);\n        });\n      });\n    });\n  }\n\n  // Function for addition records.\n\n  function addRecords(store, modelName, uuid) {\n    var promises = _ember['default'].A();\n    var listCount = 55;\n    _ember['default'].run(function () {\n\n      var builder = new _emberFlexberryData.Query.Builder(store).from(modelName).count();\n      store.query(modelName, builder.build()).then(function (result) {\n        var howAddRec = listCount - result.meta.count;\n        var newRecords = _ember['default'].A();\n\n        for (var i = 0; i < howAddRec; i++) {\n          newRecords.pushObject(store.createRecord(modelName, { name: uuid }));\n        }\n\n        newRecords.forEach(function (item) {\n          promises.push(item.save());\n        });\n      });\n    });\n    return _ember['default'].RSVP.Promise.all(promises);\n  }\n\n  // Function for deleting records.\n\n  function deleteRecords(store, modelName, uuid, assert) {\n    _ember['default'].run(function () {\n      var done = assert.async();\n      var builder = new _emberFlexberryData.Query.Builder(store, modelName).where('name', _emberFlexberryData.Query.FilterOperator.Eq, uuid);\n      store.query(modelName, builder.build()).then(function (results) {\n        results.content.forEach(function (item) {\n          item.deleteRecord();\n          item.save();\n        });\n        done();\n      });\n    });\n  }\n\n  // Function for waiting loading list.\n\n  function loadingLocales(locale, app) {\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var i18n = app.__container__.lookup('service:i18n');\n\n      _ember['default'].run(function () {\n        i18n.set('locale', locale);\n      });\n\n      var timeout = 500;\n      _ember['default'].run.later(function () {\n        resolve({ msg: 'ok' });\n      }, timeout);\n    });\n  }\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-tests-functions.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-tests-functions.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-tests-functions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-tests-functions.js should pass jshint.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test', ['exports', 'ember', 'dummy/tests/acceptance/components/flexberry-objectlistview/execute-folv-test', 'dummy/tests/acceptance/components/flexberry-objectlistview/folv-tests-functions'], function (exports, _ember, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions) {\n\n  (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewExecuteFolvTest.executeTest)('check wrapper and projection', function (store, assert, app) {\n    assert.expect(6);\n    var path = 'components-acceptance-tests/flexberry-objectlistview/base-operations';\n    visit(path);\n    andThen(function () {\n      assert.equal(currentPath(), path);\n\n      var controller = app.__container__.lookup('controller:' + currentRouteName());\n      var projectionName = function projectionName() {\n        return _ember['default'].get(controller, 'modelProjection');\n      };\n\n      var $olv = _ember['default'].$('.object-list-view ');\n      var $folvContainer = _ember['default'].$('.object-list-view-container');\n      var $tableInFolvContainer = _ember['default'].$('table', $folvContainer);\n      assert.equal($tableInFolvContainer.length, 1, 'folv table in container exist');\n\n      var $tableBody = _ember['default'].$('tbody', '.object-list-view-container');\n      assert.equal($tableBody.length, 1, 'tbody in table exist');\n\n      var dtHeadTable = _ember['default'].$('.dt-head-left.me.class', 'thead', $tableInFolvContainer);\n\n      var done = assert.async();\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.checkSortingList)(store, projectionName(), $olv, null).then(function (isTrue) {\n        assert.ok(isTrue, 'records are displayed correctly');\n        done();\n      });\n\n      (0, _dummyTestsAcceptanceComponentsFlexberryObjectlistviewFolvTestsFunctions.loadingLocales)('en', app).then(function () {\n\n        // Check projectionName.\n        var attrs = projectionName().attributes;\n        var flag = true;\n\n        Object.keys(attrs).forEach(function (element, index, array) {\n          if (attrs[element].kind !== 'hasMany') {\n            flag = flag && _ember['default'].$.trim(dtHeadTable[index].innerText) === attrs[element].caption;\n          }\n        });\n        assert.ok(flag, 'projection = columns names');\n\n        var newProjectionName = 'SettingLookupExampleView';\n        controller.set('modelProjection', newProjectionName);\n\n        // Ember.get(controller, 'modelProjection') returns only the name of the projection when it replaced.\n        assert.equal(projectionName(), newProjectionName, 'projection name is changed');\n      });\n    });\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - acceptance/components/flexberry-objectlistview');\n  test('acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js should pass jscs', function () {\n    ok(true, 'acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js should pass jscs.');\n  });\n});","define('dummy/tests/acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/components/flexberry-objectlistview/folv-wrapper-projection-test.js should pass jshint.');\n  });\n});","define('dummy/tests/adapters/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - adapters');\n  test('adapters/application.js should pass jscs', function () {\n    ok(true, 'adapters/application.js should pass jscs.');\n  });\n});","define('dummy/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('dummy/tests/app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('app.js should pass jscs', function () {\n    ok(true, 'app.js should pass jscs.');\n  });\n});","define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/css-picker.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/css-picker.js should pass jscs', function () {\n    ok(true, 'components/css-picker.js should pass jscs.');\n  });\n});","define('dummy/tests/components/css-picker.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/css-picker.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/css-picker.js should pass jshint.');\n  });\n});","define('dummy/tests/components/number-input.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/number-input.js should pass jscs', function () {\n    ok(true, 'components/number-input.js should pass jscs.');\n  });\n});","define('dummy/tests/components/number-input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/number-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-input.js should pass jshint.');\n  });\n});","define('dummy/tests/components/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/settings-example.js should pass jscs', function () {\n    ok(true, 'components/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/components/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/application.js should pass jscs', function () {\n    ok(true, 'controllers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-acceptance-tests/flexberry-checkbox');\n  test('controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jscs', function () {\n    ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-acceptance-tests/flexberry-checkbox');\n  test('controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jscs', function () {\n    ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-acceptance-tests/flexberry-objectlistview');\n  test('controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jscs', function () {\n    ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/date-format.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-acceptance-tests/flexberry-objectlistview');\n  test('controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jscs', function () {\n    ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/date-format.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-acceptance-tests/flexberry-objectlistview');\n  test('controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jscs', function () {\n    ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-button/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-button');\n  test('controllers/components-examples/flexberry-button/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-button/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-button/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-button/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-button/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-checkbox');\n  test('controllers/components-examples/flexberry-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-datepicker');\n  test('controllers/components-examples/flexberry-datepicker/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-datepicker/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-datepicker/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-datepicker/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-ddau-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-ddau-checkbox');\n  test('controllers/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-ddau-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-ddau-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/conditional-render-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/empty-value-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/items-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/items-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/items-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/items-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-field/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-field');\n  test('controllers/components-examples/flexberry-field/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-field/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-field/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-field/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-field/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-file/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-file');\n  test('controllers/components-examples/flexberry-file/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-file/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-file/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-file/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-file/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/configurate-row-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-groupedit');\n  test('controllers/components-examples/flexberry-groupedit/configurate-row-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-groupedit/configurate-row-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/configurate-row-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-groupedit/configurate-row-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/configurate-row-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-groupedit');\n  test('controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-groupedit/model-update-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-groupedit');\n  test('controllers/components-examples/flexberry-groupedit/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-groupedit/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-groupedit/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/autocomplete-order-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/autocomplete-order-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/autocomplete-order-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/customizing-window-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/default-ordering-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/default-ordering-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/default-ordering-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/default-ordering-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/default-ordering-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/default-ordering-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/dropdown-mode-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/lookup-block-form-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/lookup-in-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-menu');\n  test('controllers/components-examples/flexberry-menu/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-menu/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-menu/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-menu/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit');\n  test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/hierarchy-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/hierarchy-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/hierarchy-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/inheritance-models');\n  test('controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/object-list-view-resize.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/object-list-view-resize.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/on-edit-form');\n  test('controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/selected-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/selected-rows.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/selected-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/selected-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/selected-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/selected-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpledatetime');\n  test('controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpledatetime/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/configurate-rows.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/custom-filter.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/limit-function-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/on-edit-form.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv/on-edit-form');\n  test('controllers/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/selected-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/selected-rows.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/selected-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/selected-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/selected-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/selected-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpleolv');\n  test('controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-textarea');\n  test('controllers/components-examples/flexberry-textarea/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-textarea/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-textarea/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textarea/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-textbox');\n  test('controllers/components-examples/flexberry-textbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-textbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-textbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/ge-into-toggler-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-toggler');\n  test('controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/ge-into-toggler-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-toggler');\n  test('controllers/components-examples/flexberry-toggler/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-toggler/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-toggler/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-tree/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-tree');\n  test('controllers/components-examples/flexberry-tree/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-tree/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-tree/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-tree/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-tree/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/ui-message/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/ui-message');\n  test('controllers/components-examples/ui-message/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/ui-message/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/ui-message/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/ui-message/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/ui-message/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-application-user-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-application-user-edit');\n  test('controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-application-user-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-comment-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-comment-edit');\n  test('controllers/ember-flexberry-dummy-comment-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-comment-vote-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-vote-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-comment-vote-edit');\n  test('controllers/ember-flexberry-dummy-comment-vote-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-vote-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-vote-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-vote-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-localization-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-localization-edit');\n  test('controllers/ember-flexberry-dummy-localization-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-localization-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-suggestion-edit');\n  test('controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-suggestion-type-edit');\n  test('controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-toggler-example-master-e.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-toggler-example-master-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-toggler-example-master-e');\n  test('controllers/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-toggler-example-master-e/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-toggler-example-master-e/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/integration-examples/edit-form');\n  test('controllers/integration-examples/edit-form/readonly-mode.js should pass jscs', function () {\n    ok(true, 'controllers/integration-examples/edit-form/readonly-mode.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/integration-examples/edit-form/readonly-mode.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/readonly-mode.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/validation.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/integration-examples/edit-form');\n  test('controllers/integration-examples/edit-form/validation.js should pass jscs', function () {\n    ok(true, 'controllers/integration-examples/edit-form/validation.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/integration-examples/edit-form/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/validation.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/clear-log-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/log-service-examples');\n  test('controllers/log-service-examples/clear-log-form.js should pass jscs', function () {\n    ok(true, 'controllers/log-service-examples/clear-log-form.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/clear-log-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/log-service-examples/clear-log-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/log-service-examples/clear-log-form.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/log-service-examples');\n  test('controllers/log-service-examples/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/log-service-examples/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/log-service-examples/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/log-service-examples/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-services-lock-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/new-platform-flexberry-services-lock-list.js should pass jscs', function () {\n    ok(true, 'controllers/new-platform-flexberry-services-lock-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-services-lock-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/new-platform-flexberry-services-lock-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-platform-flexberry-services-lock-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/sitemap-node.js should pass jscs', function () {\n    ok(true, 'controllers/sitemap-node.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/sitemap-node.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sitemap-node.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/user-setting-forms/user-setting-delete.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/user-setting-forms');\n  test('controllers/user-setting-forms/user-setting-delete.js should pass jscs', function () {\n    ok(true, 'controllers/user-setting-forms/user-setting-delete.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/user-setting-forms/user-setting-delete.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/user-setting-forms/user-setting-delete.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/user-setting-forms/user-setting-delete.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/conditional-render-example');\n  test('enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/empty-value-example');\n  test('enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/settings-example');\n  test('enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/settings-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-groupedit/shared');\n  test('enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-gender.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums');\n  test('enums/ember-flexberry-dummy-gender.js should pass jscs', function () {\n    ok(true, 'enums/ember-flexberry-dummy-gender.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-gender.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/ember-flexberry-dummy-gender.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-gender.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-vote-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums');\n  test('enums/ember-flexberry-dummy-vote-type.js should pass jscs', function () {\n    ok(true, 'enums/ember-flexberry-dummy-vote-type.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-vote-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/ember-flexberry-dummy-vote-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-vote-type.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/integration-examples/edit-form/readonly-mode');\n  test('enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/integration-examples/edit-form/readonly-mode/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/integration-examples/edit-form/validation');\n  test('enums/integration-examples/edit-form/validation/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/integration-examples/edit-form/validation/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/integration-examples/edit-form/validation/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/validation/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/destroy-app.js should pass jscs', function () {\n    ok(true, 'helpers/destroy-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/module-for-acceptance.js should pass jscs', function () {\n    ok(true, 'helpers/module-for-acceptance.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/resolver.js should pass jscs', function () {\n    ok(true, 'helpers/resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/start-app.js should pass jscs', function () {\n    ok(true, 'helpers/start-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-safe-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-safe-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-safe-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-safe-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('dummy/tests/integration/components/flexberry-checkbox-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-checkbox', 'Integration | Component | flexberry-checkbox', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Component renders properly', function (assert) {\n    assert.expect(15);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 50\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['caption', ['subexpr', '@mut', [['get', 'caption', ['loc', [null, [1, 29], [1, 36]]]]], [], []], 'class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [1, 43], [1, 48]]]]], [], []]], ['loc', [null, [1, 0], [1, 50]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-checkbox'), true, 'Component\\'s container has \\'flexberry-checkbox\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('checkbox'), true, 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($checkboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($checkboxInput.attr('type'), 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n    assert.strictEqual($checkboxInput.hasClass('flexberry-checkbox-input'), true, 'Component\\'s inner checkbox <input> has flexberry-checkbox-input css-class');\n    assert.strictEqual($checkboxInput.hasClass('hidden'), true, 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'radio slider toggle';\n    this.set('class', additioanlCssClasses);\n\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('Component renders it\\'s label properly', function (assert) {\n    assert.expect(5);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 34\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['label', ['subexpr', '@mut', [['get', 'label', ['loc', [null, [1, 27], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component, it's inner <label>.\n    var $component = this.$().children();\n    var $checkboxLabel = $component.children('label');\n\n    // Check <label>'s text.\n    assert.strictEqual($checkboxLabel.length === 1, true, 'Component has inner <label>');\n    assert.strictEqual($checkboxLabel.hasClass('flexberry-checkbox-label'), true, 'Component\\'s inner <label> has flexberry-checkbox-label css-class');\n    assert.strictEqual(_ember['default'].$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n    // Define some label & check <label>'s text again.\n    var label = 'This is checkbox';\n    this.set('label', label);\n    assert.strictEqual(_ember['default'].$.trim($checkboxLabel.text()) === label, true, 'Component\\'s inner <label> has text defined in component\\'s \\'label\\' property: \\'' + label + '\\'');\n\n    // Clean up defined label & check <label>'s text again.\n    label = null;\n    this.set('label', label);\n    assert.strictEqual(_ember['default'].$.trim($checkboxLabel.text()).length === 0, true, 'Component\\'s inner <label> is empty if component\\'s \\'label\\' property is cleaned up');\n  });\n\n  (0, _emberQunit.test)('Changes in checkbox causes changes in binded value', function (assert) {\n    var _this = this;\n\n    assert.expect(9);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 33\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 27], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' before first click');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before first click');\n    assert.strictEqual(_ember['default'].typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' before first click');\n\n    // Imitate click on component (change it's state to checked) & check it's state again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after click');\n      assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click');\n      assert.strictEqual(_this.get('flag'), true, 'Component\\'s binded value is \\'true\\' after click');\n    });\n\n    // Imitate click on component again (change it's state to unchecked) & check it's state again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after second click');\n      assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after second click');\n      assert.strictEqual(_this.get('flag'), false, 'Component\\'s binded value is \\'false\\' after second click');\n    });\n  });\n\n  (0, _emberQunit.test)('Changes in in binded value causes changes in checkbox', function (assert) {\n    assert.expect(7);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 33\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 27], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' by default');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked by default');\n    assert.strictEqual(_ember['default'].typeOf(this.get('flag')), 'undefined', 'Component\\'s binded value is \\'undefined\\' by default');\n\n    // Change binded value to 'true' & check component's state again (it must be checked).\n    this.set('flag', true);\n    assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after binded value changed to \\'true\\'');\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after binded value changed to \\'true\\'');\n\n    // Change binded value to 'false' & check component's state again (it must be unchecked).\n    this.set('flag', false);\n    assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after binded value changed to \\'false\\'');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after binded value changed to \\'false\\'');\n  });\n\n  (0, _emberQunit.test)('Component sends \\'onChange\\' action', function (assert) {\n    assert.expect(2);\n\n    var onCheckboxChangeEventObject = null;\n    this.set('actions.onCheckboxChange', function (e) {\n      onCheckboxChangeEventObject = e;\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 70\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 27], [1, 31]]]]], [], []], 'onChange', ['subexpr', 'action', ['onCheckboxChange'], [], ['loc', [null, [1, 41], [1, 68]]]]], ['loc', [null, [1, 0], [1, 70]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Imitate click on component (change it's state to checked) & check action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual(_ember['default'].get(onCheckboxChangeEventObject, 'checked'), true, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'true\\' after first click');\n    });\n\n    // Imitate click on component again (change it's state to unchecked) & check action's event object again.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual(_ember['default'].get(onCheckboxChangeEventObject, 'checked'), false, 'Component sends \\'onChange\\' action with \\'checked\\' property equals to \\'false\\' after second click');\n    });\n  });\n\n  (0, _emberQunit.test)('Component works properly in readonly mode', function (assert) {\n    var _this2 = this;\n\n    assert.expect(11);\n\n    var onCheckboxChangeEventObject = null;\n    this.set('actions.onCheckboxChange', function (e) {\n      onCheckboxChangeEventObject = e;\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 88\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [1, 30], [1, 38]]]]], [], []], 'value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 45], [1, 49]]]]], [], []], 'onChange', ['subexpr', 'action', ['onCheckboxChange'], [], ['loc', [null, [1, 59], [1, 86]]]]], ['loc', [null, [1, 0], [1, 88]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' by default');\n\n    // Enable readonly mode & check component's state again.\n    this.set('readonly', true);\n    assert.strictEqual($component.hasClass('read-only'), true, 'Component has css-class \\'read-only\\' when readonly mode is enabled');\n\n    // Imitate click on component (try to change it's state to checked) & check it's state & action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual(onCheckboxChangeEventObject, null, 'Component doesn\\'t send \\'onChange\\' action in readonly mode');\n      assert.strictEqual($component.hasClass('checked'), false, 'Component hasn\\'t css-class \\'checked\\' after click in readonly mode');\n      assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click in readonly mode');\n      assert.strictEqual(_ember['default'].typeOf(_this2.get('flag')), 'undefined', 'Component\\'s binded value is still \\'undefined\\' after click in readonly mode');\n    });\n\n    // Disable readonly mode & check component's state again.\n    this.set('readonly', false);\n    assert.strictEqual($component.hasClass('read-only'), false, 'Component hasn\\'t css-class \\'read-only\\' when readonly mode is disabled');\n\n    // Imitate click on component (try to change it's state to checked) & check it's state & action's event object.\n    // Sometimes ember recognizes programmatical imitations of UI-events as asynchrony, so we should wrap them into Ember.run.\n    _ember['default'].run(function () {\n      $component.click();\n      assert.strictEqual(_ember['default'].isNone(onCheckboxChangeEventObject), false, 'Component sends \\'onChange\\' action when readonly mode is disabled');\n      assert.strictEqual($component.hasClass('checked'), true, 'Component has css-class \\'checked\\' after first click when readonly mode is disabled');\n      assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after first click when readonly mode is disabled');\n      assert.strictEqual(_this2.get('flag'), true, 'Component\\'s binded value is equals to \\'true\\' after first click when readonly mode is disabled');\n    });\n  });\n\n  (0, _emberQunit.test)('Setting up classes in checkbox', function (assert) {\n    assert.expect(6);\n\n    var checkClass = 'radio slider toggle';\n    this.set('class', checkClass);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 27], [1, 31]]]]], [], []], 'class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [1, 38], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's initial state.\n    assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' by default');\n    assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' by default');\n    assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' by default');\n\n    // Change binded value to 'true' & check component's state again (it must be checked).\n    this.set('flag', true);\n\n    // Check component's afther change state.\n    assert.strictEqual($component.hasClass('radio'), true, 'Component hasn\\'t css-class \\'radio\\' afther change');\n    assert.strictEqual($component.hasClass('slider'), true, 'Component hasn\\'t css-class \\'slider\\' afther change');\n    assert.strictEqual($component.hasClass('toggle'), true, 'Component hasn\\'t css-class \\'toggle\\' afther change');\n  });\n});","define('dummy/tests/integration/components/flexberry-checkbox-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-checkbox-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-checkbox-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-checkbox-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-checkbox-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-checkbox-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-datepicker', 'Integration | Component | Flexberry datepicker', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-datepicker', ['loc', [null, [1, 0], [1, 24]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-datepicker', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    //Component does not support template block usage.\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-datetime-picker-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-datetime-picker-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-datetime-picker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-datetime-picker-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-ddau-checkbox-test', ['exports', 'ember', 'ember-flexberry/components/flexberry-ddau-checkbox', 'ember-flexberry/mixins/flexberry-ddau-checkbox-actions-handler', 'ember-qunit'], function (exports, _ember, _emberFlexberryComponentsFlexberryDdauCheckbox, _emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-ddau-checkbox', 'Integration | Component | flexberry-ddau-checkbox', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Component renders properly', function (assert) {\n    assert.expect(17);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 55\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['caption', ['subexpr', '@mut', [['get', 'caption', ['loc', [null, [1, 34], [1, 41]]]]], [], []], 'class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [1, 48], [1, 53]]]]], [], []]], ['loc', [null, [1, 0], [1, 55]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component, it's inner <input> & <label>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n    var $checkboxCaption = $component.children('label');\n\n    var flexberryClassNames = _emberFlexberryComponentsFlexberryDdauCheckbox['default'].flexberryClassNames;\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass(flexberryClassNames.wrapper), true, 'Component\\'s container has \\'' + flexberryClassNames.wrapper + '\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('checkbox'), true, 'Component\\'s wrapper has \\'checkbox\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($checkboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($checkboxInput.attr('type'), 'checkbox', 'Component\\'s inner <input> is of checkbox type');\n    assert.strictEqual($checkboxInput.hasClass(flexberryClassNames.checkboxInput), true, 'Component\\'s inner checkbox <input> has \\'' + flexberryClassNames.checkboxInput + '\\' css-class');\n    assert.strictEqual($checkboxInput.hasClass('hidden'), true, 'Component\\'s inner checkbox <input> has \\'hidden\\' css-class');\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked');\n\n    // Check caption's <label>.\n    assert.strictEqual($checkboxCaption.length === 1, true, 'Component has inner <label>');\n    assert.strictEqual($checkboxCaption.hasClass(flexberryClassNames.checkboxCaption), true, 'Component\\'s inner <label> has \\'' + flexberryClassNames.checkboxCaption + '\\' css-class');\n    assert.strictEqual(_ember['default'].$.trim($checkboxCaption.text()).length === 0, true, 'Component\\'s inner <label> is empty by default');\n\n    var checkboxCaptionText = 'Checkbox caption';\n    this.set('caption', checkboxCaptionText);\n    assert.strictEqual(_ember['default'].$.trim($checkboxCaption.text()), checkboxCaptionText, 'Component\\'s inner <label> text changes when component\\'s \\'caption\\' property changes');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'additional-css-class-name and-another-one';\n    this.set('class', additioanlCssClasses);\n\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('Component invokes actions', function (assert) {\n    assert.expect(3);\n\n    var latestEventObjects = {\n      change: null\n    };\n\n    // Bind component's action handlers.\n    this.set('actions.onFlagChange', function (e) {\n      latestEventObjects.change = e;\n    });\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 58\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['change', ['subexpr', 'action', ['onFlagChange'], [], ['loc', [null, [1, 33], [1, 56]]]]], ['loc', [null, [1, 0], [1, 58]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    assert.strictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action wasn\\'t invoked before click');\n\n    // Imitate first click on component.\n    $component.click();\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after first click');\n\n    // Imitate second click on component.\n    latestEventObjects.change = null;\n    $component.click();\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component\\'s \\'change\\' action was invoked after second click');\n  });\n\n  (0, _emberQunit.test)('Component doesn\\'t change binded value (without \\'change\\' action handler)', function (assert) {\n    // Mock Ember.assert method.\n    var thrownExceptions = _ember['default'].A();\n    var originalEmberAssert = _ember['default'].assert;\n    _ember['default'].assert = function () {\n      try {\n        originalEmberAssert.apply(undefined, arguments);\n      } catch (ex) {\n        thrownExceptions.pushObject(ex);\n      }\n    };\n\n    assert.expect(4);\n\n    this.set('flag', false);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 32], [1, 36]]]]], [], []]], ['loc', [null, [1, 0], [1, 38]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Imitate click on component & check for exception.\n    $component.click();\n\n    // Check component's state after click (it should be changed).\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> isn\\'t checked after click (without \\'change\\' action handler)');\n\n    // Check binded value state after click (it should be unchanged, because 'change' action handler is not defined).\n    assert.strictEqual(this.get('flag'), false, 'Component doesn\\'t change binded value (without \\'change\\' action handler)');\n\n    assert.strictEqual(thrownExceptions.length === 1 && /.*required.*change.*action.*not.*defined.*/gi.test(thrownExceptions[0].message), true, 'Component throws single exception if \\'change\\' action handler is not defined');\n\n    // Clean up after mock Ember.assert.\n    _ember['default'].assert = originalEmberAssert;\n  });\n\n  (0, _emberQunit.test)('Component changes binded value (with \\'change\\' action handler)', function (assert) {\n    var _this = this;\n\n    assert.expect(7);\n\n    this.set('flag', false);\n\n    // Bind component's 'change' action handler.\n    this.set('actions.onFlagChange', function (e) {\n      assert.strictEqual(e.originalEvent.target.id, _this.$('input')[0].id);\n      _this.set('flag', e.newValue);\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 69\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 32], [1, 36]]]]], [], []], 'change', ['subexpr', 'action', ['onFlagChange'], [], ['loc', [null, [1, 44], [1, 67]]]]], ['loc', [null, [1, 0], [1, 69]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Make component checked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler)');\n    assert.strictEqual(this.get('flag'), true, 'Component\\'s binded value changed (with \\'change\\' action handler)');\n\n    // Make component unchecked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler)');\n    assert.strictEqual(this.get('flag'), false, 'Component\\' binded value changed after second click (with \\'change\\' action handler)');\n  });\n\n  (0, _emberQunit.test)('Component changes binded value (with \\'change\\' action handler from special mixin)', function (assert) {\n    assert.expect(5);\n\n    this.set('flag', false);\n\n    // Bind component's 'change' action handler from specialized mixin.\n    this.set('actions.onCheckboxChange', _emberFlexberryMixinsFlexberryDdauCheckboxActionsHandler['default'].mixins[0].properties.actions.onCheckboxChange);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 80\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 32], [1, 36]]]]], [], []], 'change', ['subexpr', 'action', ['onCheckboxChange', 'flag'], [], ['loc', [null, [1, 44], [1, 78]]]]], ['loc', [null, [1, 0], [1, 80]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Make component checked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click (with \\'change\\' action handler from special mixin)');\n    assert.strictEqual(this.get('flag'), true, 'Component changed binded value (with \\'change\\' action handler from special mixin)');\n\n    // Make component unchecked.\n    $component.click();\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after second click (with \\'change\\' action handler from special mixin)');\n    assert.strictEqual(this.get('flag'), false, 'Component changed binded value after second click (with \\'change\\' action handler from special mixin)');\n  });\n\n  (0, _emberQunit.test)('Component works properly in readonly mode', function (assert) {\n    assert.expect(9);\n\n    var latestEventObjects = {\n      change: null\n    };\n\n    // Bind component's action handlers.\n    this.set('actions.onFlagChange', function (e) {\n      latestEventObjects.change = e;\n    });\n\n    // Render component in readonly mode.\n    this.set('flag', false);\n    this.set('readonly', true);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 87\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-ddau-checkbox', [], ['value', ['subexpr', '@mut', [['get', 'flag', ['loc', [null, [1, 32], [1, 36]]]]], [], []], 'readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [1, 46], [1, 54]]]]], [], []], 'change', ['subexpr', 'action', ['onFlagChange'], [], ['loc', [null, [1, 62], [1, 85]]]]], ['loc', [null, [1, 0], [1, 87]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component & it's inner <input>.\n    var $component = this.$().children();\n    var $checkboxInput = $component.children('input');\n\n    // Check component's initial state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked before click');\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n    assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n\n    // Disable readonly mode.\n    this.set('readonly', false);\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), true, 'Component\\'s inner checkbox <input> is checked after click');\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n    latestEventObjects.change = null;\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> is unchecked after click');\n    assert.notStrictEqual(latestEventObjects.change, null, 'Component send \\'change\\' action after readonly mode disabling');\n\n    latestEventObjects.change = null;\n\n    // Enable readonly mode again.\n    this.set('readonly', true);\n\n    // Imitate click on component.\n    $component.click();\n\n    // Check after click state.\n    assert.strictEqual($checkboxInput.prop('checked'), false, 'Component\\'s inner checkbox <input> isn\\'t checked after click');\n    assert.strictEqual(latestEventObjects.change, null, 'Component doesn\\'t send \\'change\\' action in readonly mode');\n  });\n});","define('dummy/tests/integration/components/flexberry-ddau-checkbox-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-ddau-checkbox-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-ddau-checkbox-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-ddau-checkbox-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-ddau-checkbox-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-ddau-checkbox-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-test', ['exports', 'ember', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (exports, _ember, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations, _emberQunit) {\n\n  var animationDuration = _ember['default'].$.fn.dropdown.settings.duration + 100;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-dropdown', 'Integration | Component | flexberry dropdown', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  // Helper method to expand flexberry-dropdown.\n  var expandDropdown = function expandDropdown(options) {\n    options = options || {};\n\n    var $component = options.dropdown;\n    var $menu = $component.children('div.menu');\n\n    var callbacks = _ember['default'].A(options.callbacks || []);\n\n    return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n\n      // Click on component to trigger expand animation.\n      _ember['default'].run(function () {\n        $component.click();\n\n        // Set timeouts for possibly defined additional callbacks.\n        callbacks.forEach(function (callback) {\n          setTimeout(callback.callback, callback.timeout);\n        });\n\n        // Set timeout for end of expand animation.\n        setTimeout(function () {\n          if ($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible')) {\n            resolve();\n          } else {\n            reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n          }\n        }, animationDuration);\n      });\n    });\n  };\n\n  // Helper method to select item with specified caption from already expanded flexberry-dropdown's menu.\n  var selectDropdownItem = function selectDropdownItem(options) {\n    options = options || {};\n\n    var $component = options.dropdown;\n    var $menu = $component.children('div.menu');\n\n    var itemCaption = options.itemCaption;\n    var callbacks = _ember['default'].A(options.callbacks || []);\n\n    return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n\n      // To select some item, menu must be expanded.\n      if (!($component.hasClass('active') && $component.hasClass('visible') && $menu.hasClass('visible'))) {\n        reject(new Error('flexberry-dropdown\\'s menu isn\\'t expanded'));\n      }\n\n      // To select some item, menu must contain such item (with the specified caption).\n      var $item = $('.item:contains(' + itemCaption + ')', $menu);\n      if ($item.length === 0) {\n        reject(new Error('flexberry-dropdown\\'s menu doesn\\'t contain item with caption \\'' + itemCaption + '\\''));\n      }\n\n      // Click on item to select it & trigger collapse animation.\n      _ember['default'].run(function () {\n        $item.click();\n\n        // Set timeouts for possibly defined additional callbacks.\n        callbacks.forEach(function (callback) {\n          setTimeout(callback.callback, callback.timeout);\n        });\n\n        // Set timeout for end of collapse animation.\n        setTimeout(function () {\n          if (!($component.hasClass('active') || $component.hasClass('visible') || $menu.hasClass('visible'))) {\n            resolve();\n          } else {\n            reject(new Error('flexberry-dropdown\\'s menu isn\\'t collapsed'));\n          }\n        }, animationDuration);\n      });\n    });\n  };\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(14);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownIcon = $component.children('i.icon');\n    var $dropdownText = $component.children('div.text');\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-dropdown'), true, 'Component\\'s wrapper has \\' flexberry-dropdown\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('selection'), true, 'Component\\'s wrapper has \\'selection\\' css-class');\n    assert.strictEqual($component.hasClass('dropdown'), true, 'Component\\'s wrapper has \\'dropdown\\' css-class');\n    assert.strictEqual($dropdownIcon.hasClass('dropdown icon'), true, 'Component\\'s wrapper has \\'dropdown icon\\' css-class');\n    assert.strictEqual($dropdownText.hasClass('default text'), true, 'Component\\'s wrapper has \\'default text\\' css-class');\n    assert.strictEqual($dropdownMenu.hasClass('menu'), true, 'Component\\'s wrapper has \\'menu\\' css-class');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'scrolling compact fluid';\n    this.set('class', additioanlCssClasses);\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-dropdown', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownText = $component.children('div.default.text');\n\n    // Check <dropdown>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($dropdownText.text()), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <dropdown>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(_ember['default'].$.trim($dropdownText.text()), _ember['default'].get(_emberFlexberryLocalesEnTranslations['default'], 'components.flexberry-dropdown.placeholder'), 'Component\\'s inner <dropdown>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['placeholder', ['subexpr', '@mut', [['get', 'placeholder', ['loc', [null, [2, 16], [2, 27]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Set <dropdown>'s placeholder' & render component.\n    var placeholder = 'please type some text';\n    this.set('placeholder', placeholder);\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownText = $component.children('div.default.text');\n\n    // Check <dropdown>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($dropdownText.text()), placeholder);\n\n    // Change placeholder's value & check <dropdown>'s placeholder again.\n    placeholder = 'dropdown has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(_ember['default'].$.trim($dropdownText.text()), placeholder);\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['readonly', true], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Activate readonly mode & check that readonly (disabled) attribute exists now & has value equals to 'readonly'.\n    assert.strictEqual($component.hasClass('disabled'), true, 'Component\\'s has readonly');\n\n    // Check that component is disabled.\n    new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      _ember['default'].run(function () {\n        $component.click();\n      });\n\n      _ember['default'].run(function () {\n        var animation = assert.async();\n        setTimeout(function () {\n          assert.strictEqual($dropdownMenu.hasClass('animating'), false, 'Component is not active');\n\n          animation();\n        }, animationDuration / 2);\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('needChecksOnValue mode properly', function (assert) {\n    assert.expect(2);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [3, 10], [3, 20]]]]], [], []], 'needChecksOnValue', ['subexpr', '@mut', [['get', 'needChecksOnValue', ['loc', [null, [4, 22], [4, 39]]]]], [], []]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Stub Ember.onerror method.\n    var originalOnError = _ember['default'].onerror;\n\n    // Change property binded to 'value' & check them.\n    this.set('needChecksOnValue', true);\n    var newValue = 'Caption4';\n    var latestLoggerErrorMessage = undefined;\n    _ember['default'].onerror = function (error) {\n      latestLoggerErrorMessage = error.message;\n    };\n\n    // Check that errors handled properly.\n    this.set('value', newValue);\n    assert.strictEqual(_ember['default'].typeOf(latestLoggerErrorMessage) === 'string', true, 'Check message exists');\n    assert.strictEqual(latestLoggerErrorMessage.indexOf(newValue) > 0, true, 'Invalid value exists');\n\n    // Restore original method in the and of the test.\n    _ember['default'].onerror = originalOnError;\n  });\n\n  (0, _emberQunit.test)('dropdown with items represented by object renders properly', function (assert) {\n    assert.expect(3);\n\n    // Create objects for testing.\n    var itemsObject = {\n      item1: 'Caption1',\n      item2: 'Caption2',\n      item3: 'Caption3'\n    };\n    this.set('itemsObject', itemsObject);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['items', ['subexpr', '@mut', [['get', 'itemsObject', ['loc', [null, [2, 10], [2, 21]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n    var $dropdownItem = $dropdownMenu.children('div.item');\n\n    // Check component's captions and objects.\n    var itemsObjectKeys = Object.keys(itemsObject);\n    $dropdownItem.each(function (i) {\n      var $item = _ember['default'].$(this);\n      var itemKey = itemsObjectKeys[i];\n      var itemCaption = itemsObject[itemKey];\n\n      // Check that the captions matches the objects.\n      assert.strictEqual($item.attr('data-value'), itemCaption, 'Component\\'s item\\'s сaptions matches the objects');\n    });\n  });\n\n  (0, _emberQunit.test)('dropdown with items represented by array renders properly', function (assert) {\n    assert.expect(3);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [2, 10], [2, 20]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n    var $dropdownItem = $dropdownMenu.children('div.item');\n\n    // Check component's captions and array.\n    $dropdownItem.each(function (i) {\n      var $item = _ember['default'].$(this);\n      var itemCaption = itemsArray[i];\n\n      // Check that the captions matches the array.\n      assert.strictEqual($item.attr('data-value'), itemCaption, 'Component\\'s item\\'s сaptions matches the array');\n    });\n  });\n\n  (0, _emberQunit.test)('expand animation works properly', function (assert) {\n    assert.expect(9);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [2, 10], [2, 20]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n    assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n    assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n    assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component,\n      callbacks: [{\n        timeout: animationDuration / 2,\n        callback: function callback() {\n\n          // Check that component is animating now.\n          assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during expand animation');\n        }\n      }]\n    }).then(function () {\n\n      // Check that component is expanded now.\n      assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n    })['catch'](function (e) {\n      throw e;\n    })['finally'](function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('collapse animation works properly', function (assert) {\n    assert.expect(9);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [2, 10], [2, 20]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Check that component is expanded now.\n      assert.strictEqual($component.hasClass('active'), true, 'Component has class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), true, 'Component has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), true, 'Component\\'s menu has class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), false, 'Component\\'s menu hasn\\'t class \\'hidden\\'');\n\n      // Collapse component.\n      var itemCaption = itemsArray[1];\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption,\n        callbacks: [{\n          timeout: animationDuration / 2,\n          callback: function callback() {\n\n            // Check that component is animating now.\n            assert.strictEqual($dropdownMenu.hasClass('animating'), true, 'Component has class \\'animating\\' during collapse animation');\n          }\n        }]\n      });\n    }).then(function () {\n\n      // Check that component is collapsed now.\n      assert.strictEqual($component.hasClass('active'), false, 'Component hasn\\'t class \\'active\\'');\n      assert.strictEqual($component.hasClass('visible'), false, 'Component hasn\\'t class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('visible'), false, 'Component\\'s menu hasn\\'t class \\'visible\\'');\n      assert.strictEqual($dropdownMenu.hasClass('hidden'), true, 'Component\\'s menu has class \\'hidden\\'');\n    })['catch'](function (e) {\n      throw e;\n    })['finally'](function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('changes in inner <dropdown> causes changes in property binded to \\'value\\'', function (assert) {\n    var _this = this;\n\n    assert.expect(5);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n    this.set('value', null);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [2, 10], [2, 20]]]]], [], []], 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $dropdownMenu = $component.children('div.menu');\n\n    // Caption of the item to be selected.\n    var itemCaption = itemsArray[2];\n\n    // Select item & perform all necessary checks.\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Select item & collapse component.\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption\n      });\n    }).then(function () {\n      var $selectedItems = $dropdownMenu.children('div.item.active.selected');\n      var $selectedItem = _ember['default'].$($selectedItems[0]);\n      var $dropdownText = $component.children('div.text');\n\n      // Check that specified item is selected now & it is the only one selected item.\n      assert.strictEqual($selectedItems.length, 1, 'Only one component\\'s item is active');\n      assert.strictEqual(_ember['default'].$.trim($selectedItem.text()), itemCaption, 'Selected item\\'s caption is \\'' + itemCaption + '\\'');\n\n      // Check that dropdown's text <div> has text equals to selected item's caption.\n      assert.strictEqual($dropdownText.hasClass('default'), false, 'Component\\'s text <div> hasn\\'t class \\'default\\'');\n      assert.strictEqual(_ember['default'].$.trim($dropdownText.text()), itemCaption, 'Component\\'s text <div> has content equals to selected item \\'' + itemCaption + '\\'');\n\n      // Check that related model's value binded to dropdown is equals to selected item's caption.\n      assert.strictEqual(_this.get('value'), itemCaption, 'Related model\\'s value binded to dropdown is \\'' + itemCaption + '\\'');\n    })['catch'](function (e) {\n      throw e;\n    })['finally'](function () {\n      asyncAnimationsCompleted();\n    });\n  });\n\n  (0, _emberQunit.test)('changes in inner <dropdown> causes call to \\'onChange\\' action', function (assert) {\n    assert.expect(2);\n\n    // Create array for testing.\n    var itemsArray = ['Caption1', 'Caption2', 'Caption3'];\n    this.set('itemsArray', itemsArray);\n    this.set('value', null);\n\n    var onChangeHasBeenCalled = false;\n    var onChangeArgument = undefined;\n    this.set('actions.onDropdownChange', function (e) {\n      onChangeHasBeenCalled = true;\n      onChangeArgument = e;\n    });\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-dropdown', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'items', ['subexpr', '@mut', [['get', 'itemsArray', ['loc', [null, [3, 10], [3, 20]]]]], [], []], 'onChange', ['subexpr', 'action', ['onDropdownChange'], [], ['loc', [null, [4, 15], [4, 42]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Caption of the item to be selected.\n    var itemCaption = itemsArray[2];\n\n    // Select item & perform all necessary checks.\n    var asyncAnimationsCompleted = assert.async();\n    expandDropdown({\n      dropdown: $component\n    }).then(function () {\n\n      // Select item & collapse component.\n      return selectDropdownItem({\n        dropdown: $component,\n        itemCaption: itemCaption\n      });\n    }).then(function () {\n\n      // Check that 'onChange' action has been called.\n      assert.strictEqual(onChangeHasBeenCalled, true, 'Component\\'s \\'onChange\\' action has been called');\n      assert.strictEqual(onChangeArgument, itemCaption, 'Component\\'s \\'onChange\\' action has been called with \\'' + itemCaption + '\\' as argument');\n    })['catch'](function (e) {\n      throw e;\n    })['finally'](function () {\n      asyncAnimationsCompleted();\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-dropdown-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-dropdown-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-dropdown-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-dropdown-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-error-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-error', 'Integration | Component | flexberry error', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 31\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-error', [], ['error', ['subexpr', '@mut', [['get', 'error', ['loc', [null, [1, 24], [1, 29]]]]], [], []]], ['loc', [null, [1, 0], [1, 31]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    this.set('error', new Error('Error, error, error...'));\n    assert.ok(/Error, error, error.../.test(this.$().text()));\n  });\n});","define('dummy/tests/integration/components/flexberry-error-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-error-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-error-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-error-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-error-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-error-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test', ['exports', 'ember', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (exports, _ember, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-field', 'Integration | Component | flexberry field', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(13);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldTextbox = $component.children('div.flexberry-textbox');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-field'), true, 'Component\\'s wrapper has \\' flexberry-field\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('field'), true, 'Component\\'s wrapper has \\'field\\' css-class');\n    assert.strictEqual($fieldTextbox.length === 1, true, 'Component has inner \\'flexberry-textbox\\'');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'transparent mini huge error';\n    this.set('class', additioanlCssClasses);\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('label mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'label', ['subexpr', '@mut', [['get', 'label', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Check that label attribute doesn't exist now.\n    this.set('label', null);\n    assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n\n    // Add text for label & check that label attribute exist.\n    var labelText = 'Some text for label';\n    this.set('label', labelText);\n\n    assert.strictEqual(this.get('label'), labelText, 'Component has inner <label>');\n\n    // Check that label attribute doesn't exist now.\n    this.set('label', null);\n    assert.strictEqual(this.get('label'), null, 'Component\\'s hasn\\'t inner <label>');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [3, 13], [3, 21]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check that <input>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute by default');\n\n    // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n\n    $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <input>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n\n    $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [2, 13], [2, 21]]]]], [], []], 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    $fieldInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $fieldInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $fieldInput.val(newValue);\n    $fieldInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('click on field in readonly mode doesn\\'t change value & it\\'s type', function (assert) {\n    assert.expect(3);\n\n    // Set <input>'s value' & render component.\n    var value = 123;\n    this.set('value', value);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['readonly', true, 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    $fieldInput.click();\n    $fieldInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n    assert.strictEqual(_ember['default'].typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-field', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <input>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesEnTranslations['default'], 'components.flexberry-field.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <input>'s placeholder' & render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['placeholder', ['subexpr', '@mut', [['get', 'placeholder', ['loc', [null, [2, 16], [2, 27]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    var placeholder = 'input is empty, please type some text';\n    this.set('placeholder', placeholder);\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <input>'s placeholder again.\n    placeholder = 'input has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('type mode works properly', function (assert) {\n    assert.expect(7);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'type', ['subexpr', '@mut', [['get', 'type', ['loc', [null, [3, 9], [3, 13]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check that <input>'s type attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), '', 'Component\\'s inner <input> hasn\\'t type attribute');\n\n    // Check that <input>'s type attribute 'text'.\n    this.set('type', 'text');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'text', 'Component\\'s inner <input> type attribute \\'text\\'');\n\n    // Check that <input>'s type attribute 'number'.\n    this.set('type', 'number');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'number', 'Component\\'s inner <input> type attribute \\'number\\'');\n\n    // Check that <input>'s type attribute 'password'.\n    this.set('type', 'password');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'password', 'Component\\'s inner <input> type attribute \\'password\\'');\n\n    // Check that <input>'s type attribute 'color'.\n    this.set('type', 'color');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'color', 'Component\\'s inner <input> type attribute \\'color\\'');\n\n    // Check that <input>'s type attribute 'button'.\n    this.set('type', 'button');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'button', 'Component\\'s inner <input> type attribute \\'button\\'');\n\n    // Check that <input>'s type attribute 'hidden'.\n    this.set('type', 'hidden');\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.attr('type')), 'hidden', 'Component\\'s inner <input> type attribute \\'hidden\\'');\n  });\n\n  (0, _emberQunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <input>'s value (imitate situation when user typed something into component's <input>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into field\\'s inner input';\n    $fieldInput.val(newValue);\n    $fieldInput.change();\n\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('attribute maxlength rendered in html', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['maxlength', 5], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check <input>'s maxlength attribute.\n    assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into field\\'s inner input';\n    this.set('value', newValue);\n\n    assert.strictEqual(_ember['default'].$.trim($fieldInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-field-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-field-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-field-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-field-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (exports, _ember, _emberQunit, _dummyTestsHelpersStartApp, _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator, _emberFlexberryServicesUserSettings) {\n\n  var App = undefined;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-groupedit', 'Integration | Component | Flexberry groupedit', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n'),\n        userSettingsService: _ember['default'].inject.service('user-settings')\n      });\n\n      _emberFlexberryServicesUserSettings['default'].reopen({\n        isUserSettingsServiceEnabled: false\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this = this;\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n\n      _this.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n      _this.set('model', model);\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 96\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-groupedit', [], ['modelProjection', ['subexpr', '@mut', [['get', 'proj', ['loc', [null, [1, 38], [1, 42]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'model.details', ['loc', [null, [1, 51], [1, 64]]]]], [], []], 'componentName', 'my-group-edit'], ['loc', [null, [1, 0], [1, 96]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.ok(true);\n    });\n  });\n\n  (0, _emberQunit.test)('it properly rerenders', function (assert) {\n    var _this2 = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this2.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n      _this2.set('model', model);\n      _this2.set('componentName', testComponentName);\n      _this2.set('searchForContentChange', true);\n      _this2.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 7,\n                'column': 10\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('\\n        ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-groupedit', [], ['content', ['subexpr', '@mut', [['get', 'model.details', ['loc', [null, [3, 18], [3, 31]]]]], [], []], 'componentName', ['subexpr', '@mut', [['get', 'componentName', ['loc', [null, [4, 24], [4, 37]]]]], [], []], 'modelProjection', ['subexpr', '@mut', [['get', 'proj.attributes.details', ['loc', [null, [5, 26], [5, 49]]]]], [], []], 'searchForContentChange', ['subexpr', '@mut', [['get', 'searchForContentChange', ['loc', [null, [6, 33], [6, 55]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.equal(_this2.$('.object-list-view').find('tr').length, 2);\n\n      // Add record.\n      var detailModel = _this2.get('model.details');\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '1' }));\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '2' }));\n\n      wait().then(function () {\n        assert.equal(_this2.$('.object-list-view').find('tr').length, 3);\n\n        // Add record.\n        detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '3' }));\n        wait().then(function () {\n          assert.equal(_this2.$('.object-list-view').find('tr').length, 4);\n\n          // Delete record.\n          _this2.get('model.details').get('firstObject').deleteRecord();\n          wait().then(function () {\n            assert.equal(_this2.$('.object-list-view').find('tr').length, 3);\n\n            // Disable search for changes flag and add record.\n            _this2.set('searchForContentChange', false);\n            detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '4' }));\n            wait().then(function () {\n              assert.equal(_this2.$('.object-list-view').find('tr').length, 3);\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-groupedit-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-groupedit-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-groupedit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-groupedit-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-lookup-test', ['exports', 'ember', 'ember-flexberry-data', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _ember, _emberFlexberryData, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations, _emberQunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n\n  var app = undefined;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-lookup', 'Integration | Component | flexberry-lookup', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n\n      app = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    afterEach: function afterEach() {\n      (0, _dummyTestsHelpersDestroyApp['default'])(app);\n    }\n  });\n\n  (0, _emberQunit.test)('autocomplete doesn\\'t send data-requests in readonly mode', function (assert) {\n    var _this = this;\n\n    assert.expect(1);\n\n    var store = app.__container__.lookup('service:store');\n\n    // Override store.query method.\n    var ajaxMethodHasBeenCalled = false;\n    var originalAjaxMethod = _ember['default'].$.ajax;\n    _ember['default'].$.ajax = function () {\n      ajaxMethodHasBeenCalled = true;\n\n      return originalAjaxMethod.apply(this, arguments);\n    };\n\n    // First, load model with existing master.\n    var modelName = 'ember-flexberry-dummy-suggestion-type';\n    var query = new _emberFlexberryData.Query.Builder(store).from(modelName).selectByProjection('SuggestionTypeE').where('parent', _emberFlexberryData.Query.FilterOperator.Neq, null).top(1);\n\n    var asyncOperationsCompleted = assert.async();\n    store.query(modelName, query.build()).then(function (suggestionTypes) {\n      suggestionTypes = suggestionTypes.toArray();\n      _ember['default'].assert('One or more \\'' + modelName + '\\' must exist', suggestionTypes.length > 0);\n\n      // Remember model & render component.\n      _this.set('model', suggestionTypes[0]);\n\n      _this.set('actions.showLookupDialog', function () {});\n      _this.set('actions.removeLookupValue', function () {});\n\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 12,\n                'column': 6\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-lookup', [], ['value', ['subexpr', '@mut', [['get', 'model.parent', ['loc', [null, [2, 12], [2, 24]]]]], [], []], 'relatedModel', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [3, 19], [3, 24]]]]], [], []], 'relationName', 'parent', 'projection', 'SuggestionTypeL', 'displayAttributeName', 'name', 'title', 'Parent', 'choose', ['subexpr', 'action', ['showLookupDialog'], [], ['loc', [null, [8, 13], [8, 40]]]], 'remove', ['subexpr', 'action', ['removeLookupValue'], [], ['loc', [null, [9, 13], [9, 41]]]], 'readonly', true, 'autocomplete', true], ['loc', [null, [1, 0], [12, 6]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n\n      // Retrieve component.\n      var $component = _this.$();\n      var $componentInput = _ember['default'].$('input', $component);\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        _ember['default'].run(function () {\n          ajaxMethodHasBeenCalled = false;\n\n          // Imitate focus on component, which can cause async data-requests.\n          $componentInput.focusin();\n\n          // Wait for some time which can pass after focus, before possible async data-request will be sent.\n          _ember['default'].run.later(function () {\n            resolve();\n          }, 300);\n        });\n      });\n    }).then(function () {\n      // Check that store.query hasn\\'t been called after focus.\n      assert.strictEqual(ajaxMethodHasBeenCalled, false, '$.ajax hasn\\'t been called after click on autocomplete lookup in readonly mode');\n    })['catch'](function (e) {\n      throw e;\n    })['finally'](function () {\n      // Restore original method.\n      _ember['default'].$.ajax = originalAjaxMethod;\n\n      asyncOperationsCompleted();\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-lookup-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-lookup-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-lookup-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-lookup-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-lookup-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-lookup-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-simpledatetime', 'Integration | Component | flexberry simpledatetime', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-simpledatetime', ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(true);\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-simpledatetime-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-simpledatetime-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-simpledatetime-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-simpledatetime-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-textarea-test', ['exports', 'ember', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (exports, _ember, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-textarea', 'Integration | Component | flexberry-textarea', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(10);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-textarea'), true, 'Component\\'s wrapper has \\' flexberry-textarea\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'fluid mini huge';\n    this.set('class', additioanlCssClasses);\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [3, 13], [3, 21]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n\n    // Activate readonly mode & check that <textarea>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('readonly')), 'readonly', 'Component\\'s inner <textarea> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <textarea>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('readonly')), '', 'Component\\'s inner <textarea> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [2, 13], [2, 21]]]]], [], []], 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    $textareaInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $textareaInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    // Check <textarea>'s value not changed.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 22\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-textarea', ['loc', [null, [1, 0], [1, 22]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <textarea>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesEnTranslations['default'], 'components.flexberry-textarea.placeholder'), 'Component\\'s inner <textarea>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <textarea>'s placeholder' & render component.\n    var placeholder = 'textarea is empty, please type some text';\n    this.set('placeholder', placeholder);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['placeholder', ['subexpr', '@mut', [['get', 'placeholder', ['loc', [null, [2, 16], [2, 27]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <textarea>'s placeholder again.\n    placeholder = 'textarea has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('placeholder')), placeholder, 'Component\\'s inner <textarea>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('required mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'required', ['subexpr', '@mut', [['get', 'required', ['loc', [null, [3, 13], [3, 21]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s required attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n\n    // Activate required mode & check that <textarea>'s required attribute exists now & has value equals to 'required'.\n    this.set('required', true);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('required')), 'required', 'Component\\'s inner <textarea> has required attribute with value equals to \\'required\\'');\n\n    // Check that <textarea>'s required attribute doesn't exist now.\n    this.set('required', false);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('required')), '', 'Component\\'s inner <textarea> hasn\\'t required attribute');\n  });\n\n  (0, _emberQunit.test)('disabled mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'disabled', ['subexpr', '@mut', [['get', 'disabled', ['loc', [null, [3, 13], [3, 21]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s disabled attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n\n    // Activate disabled mode & check that <textarea>'s disabled attribute exists now & has value equals to 'disabled'.\n    this.set('disabled', true);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('disabled')), 'disabled', 'Component\\'s inner <textarea> has disabled attribute with value equals to \\'disabled\\'');\n\n    // Check that <textarea>'s disabled attribute doesn't exist now.\n    this.set('disabled', false);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('disabled')), '', 'Component\\'s inner <textarea> hasn\\'t disabled attribute');\n  });\n\n  (0, _emberQunit.test)('autofocus mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'autofocus', ['subexpr', '@mut', [['get', 'autofocus', ['loc', [null, [3, 14], [3, 23]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s autofocus attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n\n    // Activate autofocus mode & check that <textarea>'s autofocus attribute exists now & has value equals to 'autofocus'.\n    this.set('autofocus', true);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('autofocus')), 'autofocus', 'Component\\'s inner <textarea> has autofocus attribute with value equals to \\'autofocus\\'');\n\n    // Check that <textarea>'s autofocus attribute doesn't exist now.\n    this.set('autofocus', false);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('autofocus')), '', 'Component\\'s inner <textarea> hasn\\'t autofocus attribute');\n  });\n\n  (0, _emberQunit.test)('spellcheck mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'spellcheck', ['subexpr', '@mut', [['get', 'spellcheck', ['loc', [null, [3, 15], [3, 25]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s spellcheck attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('spellcheck')), '', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n\n    // Activate spellcheck mode & check that <textarea>'s spellcheck attribute exists now & has value equals to 'spellcheck'.\n    this.set('spellcheck', true);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('spellcheck')), 'true', 'Component\\'s inner <textarea> has spellcheck attribute with value equals to \\'spellcheck\\'');\n\n    // Check that <textarea>'s spellcheck attribute doesn't exist now.\n    this.set('spellcheck', false);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('spellcheck')), 'false', 'Component\\'s inner <textarea> hasn\\'t spellcheck attribute');\n  });\n\n  (0, _emberQunit.test)('wrap mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'wrap', ['subexpr', '@mut', [['get', 'wrap', ['loc', [null, [3, 9], [3, 13]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s wrap attribute 'soft'.\n    this.set('wrap', 'soft');\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('wrap')), 'soft', 'Component\\'s inner <textarea> wrap attribute \\'soft\\'');\n\n    // Check that <textarea>'s wrap attribute 'hard'.\n    this.set('wrap', 'hard');\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('wrap')), 'hard', 'Component\\'s inner <textarea> wrap attribute \\'hard\\'');\n\n    // Check that <textarea>'s wrap attribute 'off'.\n    this.set('wrap', 'off');\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('wrap')), 'off', 'Component\\'s inner <textarea> wrap attribute \\'off\\'');\n  });\n\n  (0, _emberQunit.test)('rows mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'rows', ['subexpr', '@mut', [['get', 'rows', ['loc', [null, [3, 9], [3, 13]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Retrieve default rows count for current browser.\n    var defaultRowsCount = $textareaInput.prop('rows');\n\n    // Generate random rows count >= 2.\n    var rowsValue = Math.floor(Math.random() * 10) + 2;\n\n    // Check that <textarea>'s rows attribute is equals to specified value.\n    this.set('rows', rowsValue);\n    assert.strictEqual($textareaInput.prop('rows'), rowsValue, 'Component\\'s inner <textarea>\\'s value \\'rows\\' is equals to ' + rowsValue);\n\n    // Check that <textarea>'s rows count is switched to default value.\n    this.set('rows', null);\n    assert.strictEqual($textareaInput.prop('rows'), defaultRowsCount, 'Component\\'s inner <textarea>\\'s rows count is switched to default value');\n  });\n\n  (0, _emberQunit.test)('cols mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'cols', ['subexpr', '@mut', [['get', 'cols', ['loc', [null, [3, 9], [3, 13]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Retrieve default rows count for current browser.\n    var defaultColsCount = $textareaInput.prop('cols');\n\n    // Generate random cols count >= 20.\n    var colsValue = Math.floor(Math.random() * 10) + 20;\n\n    // Check that <textarea>'s cols attribute is equals to specified value.\n    this.set('cols', colsValue);\n    assert.strictEqual($textareaInput.prop('cols'), colsValue, 'Component\\'s inner <textarea>\\'s value \\'cols\\' is equals to ' + colsValue);\n\n    // Check that <textarea>'s cols count is switched to default value.\n    this.set('cols', null);\n    assert.strictEqual($textareaInput.prop('cols'), defaultColsCount, 'Component\\'s inner <textarea> hasn\\'t value cols attribute');\n  });\n\n  (0, _emberQunit.test)('maxlength mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'maxlength', ['subexpr', '@mut', [['get', 'maxlength', ['loc', [null, [3, 14], [3, 23]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    //Generate a random value 'maxlength' and convert to a string.\n    var maxlengthValue = '' + Math.floor(Math.random() * 10);\n\n    // Check that <textarea>'s maxlength attribute.\n    this.set('maxlength', maxlengthValue);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('maxlength')), maxlengthValue, 'Component\\'s inner <textarea>\\'s value \\'maxlength\\' is equals to \\'' + maxlengthValue + '\\'');\n\n    // Check that <textarea>'s hasn\\'t value maxlength attribute.\n    this.set('maxlength', null);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('maxlength')), '', 'Component\\'s inner <textarea> hasn\\'t value maxlength attribute');\n  });\n\n  (0, _emberQunit.test)('selectionStart mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'selectionStart', ['subexpr', '@mut', [['get', 'selectionStart', ['loc', [null, [3, 19], [3, 33]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textarea';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    //Generate a random value 'selectionStart' and convert to a string.\n    var selectionStartValue = Math.floor(Math.random() * 10);\n\n    // Check that <textarea>'s selectionStart attribute.\n    this.set('selectionStart', selectionStartValue);\n    assert.strictEqual($textareaInput.prop('selectionStart'), selectionStartValue, 'Component\\'s inner <textarea>\\'s value \\'selectionStart\\' is equals to \\'' + selectionStartValue + '\\'');\n\n    // Check that <textarea>'s hasn\\'t value maxlength attribute.\n    this.set('selectionStart', null);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('selectionStart')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionStart attribute');\n  });\n\n  (0, _emberQunit.test)('selectionEnd mode works properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'selectionEnd', ['subexpr', '@mut', [['get', 'selectionEnd', ['loc', [null, [3, 17], [3, 29]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textarea';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    //Generate a random value 'selectionEnd' and convert to a string.\n    var selectionEndValue = Math.floor(Math.random() * 10);\n\n    // Check that <textarea>'s selectionEnd attribute.\n    this.set('selectionEnd', selectionEndValue);\n    assert.strictEqual($textareaInput.prop('selectionEnd'), selectionEndValue, 'Component\\'s inner <textarea>\\'s value \\'selectionEnd\\' is equals to \\'' + selectionEndValue + '\\'');\n\n    // Check that <textarea>'s hasn\\'t value maxlength attribute.\n    this.set('selectionEnd', null);\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.attr('selectionEnd')), '', 'Component\\'s inner <textarea> hasn\\'t value selectionEnd attribute');\n  });\n\n  (0, _emberQunit.test)('selectionDirection mode works properly', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'selectionDirection', ['subexpr', '@mut', [['get', 'selectionDirection', ['loc', [null, [3, 23], [3, 41]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check that <textarea>'s hasn\\'t value selectionDirection attribute.\n    this.set('selectionDirection', null);\n    assert.strictEqual($textareaInput.attr('selectionDirection'), undefined, 'Component\\'s inner <textarea> hasn\\'t value selectionDirection attribute');\n  });\n\n  (0, _emberQunit.test)('changes in inner <textarea> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <textarea>'s value (imitate situation when user typed something into component's <textarea>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textareas inner <textarea>';\n    $textareaInput.val(newValue);\n    $textareaInput.change();\n\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <textarea>', function (assert) {\n    assert.expect(4);\n\n    // Set <textarea>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textarea', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textareaInput = $component.children('textarea');\n\n    // Check <textarea>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.val()), '', 'Component\\'s inner <textarea>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into textareas inner <textarea>';\n    this.set('value', newValue);\n\n    assert.strictEqual(_ember['default'].$.trim($textareaInput.val()), newValue, 'Component\\'s inner <textarea>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-textarea-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-textarea-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-textarea-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-textarea-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-textarea-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-textarea-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-textbox-test', ['exports', 'ember', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations', 'ember-qunit'], function (exports, _ember, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-textbox', 'Integration | Component | flexberry-textbox', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(16);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-textbox'), true, 'Component\\'s wrapper has \\' flexberry-textbox\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('input'), true, 'Component\\'s wrapper has \\'input\\' css-class');\n\n    // Check <input>.\n    assert.strictEqual($textboxInput.length === 1, true, 'Component has inner <input>');\n    assert.strictEqual($textboxInput.attr('type'), 'text', 'Component\\'s inner <input> is of text type');\n\n    // Check wrapper's additional CSS-classes.\n    var additioanlCssClasses = 'fluid transparent mini huge error';\n    this.set('class', additioanlCssClasses);\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    // Clean up wrapper's additional CSS-classes.\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('class changes through base-component\\'s dynamic properties works properly', function (assert) {\n    assert.expect(6);\n\n    var initialClass = 'class1 class2';\n    var anotherClass = 'firstClass secondClass';\n    var dynamicProperties = {\n      'class': initialClass\n    };\n\n    this.set('dynamicProperties', dynamicProperties);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['dynamicProperties', ['subexpr', '@mut', [['get', 'dynamicProperties', ['loc', [null, [3, 24], [3, 41]]]]], [], []]], ['loc', [null, [2, 4], [4, 6]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var $component = this.$().children();\n\n    assert.strictEqual($component.hasClass('class1'), true, 'Component\\'s container has \\'class1\\' css-class');\n    assert.strictEqual($component.hasClass('class2'), true, 'Component\\'s container has \\'class2\\' css-class');\n\n    _ember['default'].set(dynamicProperties, 'class', anotherClass);\n    assert.strictEqual($component.hasClass('class1'), false, 'Component\\'s container hasn\\'t \\'class1\\' css-class');\n    assert.strictEqual($component.hasClass('class2'), false, 'Component\\'s container hasn\\'t \\'class2\\' css-class');\n    assert.strictEqual($component.hasClass('firstClass'), true, 'Component\\'s container has \\'firstClass\\' css-class');\n    assert.strictEqual($component.hasClass('secondClass'), true, 'Component\\'s container has \\'secondClass\\' css-class');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [2, 10], [2, 15]]]]], [], []], 'readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [3, 13], [3, 21]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check that <input>'s readonly attribute doesn't exist yet.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n\n    // Activate readonly mode & check that <input>'s readonly attribute exists now & has value equals to 'readonly'.\n    this.set('readonly', true);\n\n    $textboxInput = $component.children('input');\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('readonly')), 'readonly', 'Component\\'s inner <input> has readonly attribute with value equals to \\'readonly\\'');\n\n    // Check that <input>'s readonly attribute doesn't exist now.\n    this.set('readonly', false);\n\n    $textboxInput = $component.children('input');\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('readonly')), '', 'Component\\'s inner <input> hasn\\'t readonly attribute');\n  });\n\n  (0, _emberQunit.test)('readonly mode works properly with value', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.set('readonly', true);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['readonly', ['subexpr', '@mut', [['get', 'readonly', ['loc', [null, [2, 13], [2, 21]]]]], [], []], 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    $textboxInput.on('change', function (e) {\n      if (_this.get('readonly')) {\n        e.stopPropagation();\n        $textboxInput.val(null);\n      }\n    });\n\n    var newValue = 'New value';\n    $textboxInput.val(newValue);\n    $textboxInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to unchanged \\'value\\'');\n  });\n\n  (0, _emberQunit.test)('click on textbox in readonly mode doesn\\'t change value & it\\'s type', function (assert) {\n    assert.expect(3);\n\n    // Set <input>'s value' & render component.\n    var value = 123;\n    this.set('value', value);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['readonly', true, 'value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [3, 10], [3, 15]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    $textboxInput.click();\n    $textboxInput.change();\n\n    // Check <input>'s value not changed.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), '' + value, 'Component\\'s inner <input>\\'s value not changed');\n    assert.strictEqual(this.get('value'), value, 'Value binded to component\\'s \\'value\\' property is unchanged');\n    assert.strictEqual(_ember['default'].typeOf(this.get('value')), 'number', 'Value binded to component\\'s \\'value\\' property is still number');\n  });\n\n  (0, _emberQunit.test)('it renders i18n-ed placeholder', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-textbox', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesRuTranslations['default'], 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s default value from i18n locales/ru/translations');\n\n    // Change current locale to 'en' & check <input>'s placeholder again.\n    this.set('i18n.locale', 'en');\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('placeholder')), _ember['default'].get(_emberFlexberryLocalesEnTranslations['default'], 'components.flexberry-textbox.placeholder'), 'Component\\'s inner <input>\\'s placeholder is equals to it\\'s value from i18n locales/en/translations');\n  });\n\n  (0, _emberQunit.test)('it renders manually defined placeholder', function (assert) {\n    assert.expect(2);\n\n    // Set <input>'s placeholder' & render component.\n    var placeholder = 'Input is empty, please type some text';\n    this.set('placeholder', placeholder);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['placeholder', ['subexpr', '@mut', [['get', 'placeholder', ['loc', [null, [2, 16], [2, 27]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s placeholder.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually defined value \\'' + placeholder + '\\'');\n\n    // Change placeholder's value & check <input>'s placeholder again.\n    placeholder = 'Input has no value';\n    this.set('placeholder', placeholder);\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.attr('placeholder')), placeholder, 'Component\\'s inner <input>\\'s placeholder is equals to manually updated value \\'' + placeholder + '\\'');\n  });\n\n  (0, _emberQunit.test)('changes in inner <input> causes changes in property binded to \\'value\\'', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change <input>'s value (imitate situation when user typed something into component's <input>)\n    // & check them again ('change' event is needed to force bindings work).\n    var newValue = 'Some text typed into textboxes inner <input>';\n    $textboxInput.val(newValue);\n    $textboxInput.change();\n\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n\n  (0, _emberQunit.test)('attribute maxlength rendered in html', function (assert) {\n    assert.expect(1);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-field', [], ['maxlength', 5], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $fieldInput = _ember['default'].$('.flexberry-textbox input', $component);\n\n    // Check <input>'s maxlength attribute.\n    assert.strictEqual($fieldInput.attr('maxlength'), '5', 'Component\\'s inner <input>\\'s attribute maxlength rendered');\n  });\n\n  (0, _emberQunit.test)('changes in property binded to \\'value\\' causes changes in inner <input>', function (assert) {\n    assert.expect(4);\n\n    // Set <input>'s value' & render component.\n    this.set('value', null);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-textbox', [], ['value', ['subexpr', '@mut', [['get', 'value', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $textboxInput = $component.children('input');\n\n    // Check <input>'s value & binded value for initial emptyness.\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), '', 'Component\\'s inner <input>\\'s value is equals to \\'\\'');\n    assert.strictEqual(this.get('value'), null, 'Component\\'s property binded to \\'value\\' is equals to null');\n\n    // Change property binded to 'value' & check them again.\n    var newValue = 'Some text typed into textboxes inner <input>';\n    this.set('value', newValue);\n\n    assert.strictEqual(_ember['default'].$.trim($textboxInput.val()), newValue, 'Component\\'s inner <input>\\'s value is equals to \\'' + newValue + '\\'');\n    assert.strictEqual(this.get('value'), newValue, 'Component\\'s property binded to \\'value\\' is equals to \\'' + newValue + '\\'');\n  });\n});","define('dummy/tests/integration/components/flexberry-textbox-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-textbox-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-textbox-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-textbox-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-textbox-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-textbox-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-toggler-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  var animationDuration = _ember['default'].$.fn.accordion.settings.duration + 100;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-toggler', 'Integration | Component | flexberry toggler', {\n    integration: true\n  });\n\n  // Common expand/collapse test method.\n  var expandCollapseTogglerWithStateChecks = function expandCollapseTogglerWithStateChecks(assert, captions) {\n    assert.expect(10);\n\n    var content = 'Toggler\\'s content';\n\n    captions = captions || {};\n    var caption = captions.caption || '';\n    var expandedCaption = captions.expandedCaption || caption;\n    var collapsedCaption = captions.collapsedCaption || caption;\n\n    this.set('content', content);\n    this.set('caption', caption);\n    this.set('expandedCaption', expandedCaption);\n    this.set('collapsedCaption', collapsedCaption);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 8,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'content', ['loc', [null, [7, 6], [7, 17]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['caption', ['subexpr', '@mut', [['get', 'caption', ['loc', [null, [3, 14], [3, 21]]]]], [], []], 'expandedCaption', ['subexpr', '@mut', [['get', 'expandedCaption', ['loc', [null, [4, 22], [4, 37]]]]], [], []], 'collapsedCaption', ['subexpr', '@mut', [['get', 'collapsedCaption', ['loc', [null, [5, 23], [5, 39]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [8, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $componentTitle = $component.children('div .title');\n    var $componentCaption = $componentTitle.children('span');\n    var $componentContent = $component.children('div .content');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($componentTitle.hasClass('active'), false);\n    assert.strictEqual($componentContent.hasClass('active'), false);\n    assert.strictEqual(_ember['default'].$.trim($componentCaption.text()), collapsedCaption);\n\n    var expandAnimationCompleted = new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      // Try to expand component.\n      // Semantic UI will start asynchronous animation after click, so we need Ember.run here.\n      _ember['default'].run(function () {\n        $componentTitle.click();\n      });\n\n      // Check that component is animating now.\n      assert.strictEqual($componentContent.hasClass('animating'), true);\n\n      // Wait for expand animation to be completed & check component's state.\n      _ember['default'].run(function () {\n        var animationCompleted = assert.async();\n        setTimeout(function () {\n          // Check that component is expanded now.\n          assert.strictEqual($componentTitle.hasClass('active'), true);\n          assert.strictEqual($componentContent.hasClass('active'), true);\n          assert.strictEqual(_ember['default'].$.trim($componentCaption.text()), expandedCaption);\n\n          // Tell to test method that asynchronous operation completed.\n          animationCompleted();\n\n          // Resolve 'expandAnimationCompleted' promise.\n          resolve();\n        }, animationDuration);\n      });\n    });\n\n    // Wait for expand animation to be completed (when resolve will be called inside previous timeout).\n    // Then try to collapse component.\n    expandAnimationCompleted.then(function () {\n      // Semantic UI will start asynchronous animation after click, so we need Ember.run here.\n      _ember['default'].run(function () {\n        $componentTitle.click();\n      });\n\n      // Wait for collapse animation to be completed & check component's state.\n      _ember['default'].run(function () {\n        var animationCompleted = assert.async();\n        setTimeout(function () {\n          // Check that component is expanded now.\n          assert.strictEqual($componentTitle.hasClass('active'), false);\n          assert.strictEqual($componentContent.hasClass('active'), false);\n          assert.strictEqual(_ember['default'].$.trim($componentCaption.text()), collapsedCaption);\n\n          animationCompleted();\n        }, animationDuration);\n      });\n    });\n  };\n\n  (0, _emberQunit.test)('component renders properly', function (assert) {\n    assert.expect(22);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: true,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['class', ['subexpr', '@mut', [['get', 'class', ['loc', [null, [3, 12], [3, 17]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [5, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerIcon = $togglerTitle.children('i');\n    var $togglerCaption = $togglerTitle.children('span');\n    var $togglerContent = $component.children('.content');\n\n    // Check wrapper.\n    assert.strictEqual($component.prop('tagName'), 'DIV', 'Component\\'s wrapper is a <div>');\n    assert.strictEqual($component.hasClass('flexberry-toggler'), true, 'Component\\'s wrapper has \\'flexberry-toggler\\' css-class');\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('accordion'), true, 'Component\\'s wrapper has \\'accordion\\' css-class');\n    assert.strictEqual($component.hasClass('fluid'), true, 'Component\\'s wrapper has \\'fluid\\' css-class');\n\n    // Check title's <div>.\n    assert.strictEqual($togglerTitle.length === 1, true, 'Component has inner title block');\n    assert.strictEqual($togglerTitle.prop('tagName'), 'DIV', 'Component\\'s inner title block is a <div>');\n    assert.strictEqual($togglerTitle.hasClass('title'), true, 'Component\\'s inner title block has \\'title\\' css-class');\n\n    // Check title's icon <i>.\n    assert.strictEqual($togglerIcon.length === 1, true, 'Component\\'s title has icon block');\n    assert.strictEqual($togglerIcon.prop('tagName'), 'I', 'Component\\'s icon block is a <i>');\n    assert.strictEqual($togglerIcon.hasClass('dropdown icon'), true, 'Component\\'s icon block has \\'dropdown icon\\' css-class');\n\n    // Check title's caption <span>.\n    assert.strictEqual($togglerCaption.length === 1, true, 'Component has inner caption block');\n    assert.strictEqual($togglerCaption.prop('tagName'), 'SPAN', 'Component\\'s caption block is a <span>');\n    assert.strictEqual($togglerCaption.hasClass('flexberry-toggler-caption'), true, 'Component\\'s caption block has \\'flexberry-toggler-caption\\' css-class');\n\n    // Check content's <div>.\n    assert.strictEqual($togglerContent.length === 1, true, 'Component has inner content block');\n    assert.strictEqual($togglerContent.prop('tagName'), 'DIV', 'Component\\'s content block is a <div>');\n    assert.strictEqual($togglerContent.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n    assert.strictEqual($togglerContent.hasClass('flexberry-toggler-content'), true, 'Component\\'s content block has \\'flexberry-toggler-content\\' css-class');\n\n    // Check component's additional CSS-classes.\n    var additioanlCssClasses = 'firstClass secondClass';\n    this.set('class', additioanlCssClasses);\n\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), true, 'Component\\'s wrapper has additional css class \\'' + cssClassName + '\\'');\n    });\n\n    this.set('class', '');\n    _ember['default'].A(additioanlCssClasses.split(' ')).forEach(function (cssClassName, index) {\n      assert.strictEqual($component.hasClass(cssClassName), false, 'Component\\'s wrapper hasn\\'t additional css class \\'' + cssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('component\\'s icon can be customized', function (assert) {\n    assert.expect(2);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 5,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: true,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['iconClass', ['subexpr', '@mut', [['get', 'iconClass', ['loc', [null, [3, 16], [3, 25]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [5, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerIcon = $togglerTitle.children('i');\n\n    // Change default icon class.\n    var defaultIconClass = 'dropdown icon';\n    assert.strictEqual($togglerIcon.attr('class'), defaultIconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n\n    // Change icon class & check again.\n    var iconClass = 'marker icon';\n    this.set('iconClass', iconClass);\n    assert.strictEqual($togglerIcon.attr('class'), iconClass, 'Component\\'s icon is \\'dropdown icon\\' by default');\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'expandedCaption\\' & \\'collapsedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      expandedCaption: 'Toggler\\'s expanded caption',\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'caption\\' & \\'collapsedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption',\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with defined \\'caption\\' & \\'expandedCaption\\'', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption',\n      expandedCaption: 'Toggler\\'s expanded caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'caption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      caption: 'Toggler\\'s caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'expandedCaption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      expandedCaption: 'Toggler\\'s expanded caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses with only \\'collapsedCaption\\' defined', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {\n      collapsedCaption: 'Toggler\\'s collapsed caption'\n    });\n  });\n\n  (0, _emberQunit.test)('component expands/collapses without defined captions', function (assert) {\n    expandCollapseTogglerWithStateChecks.call(this, assert, {});\n  });\n\n  (0, _emberQunit.test)('changes in \\'expanded\\' property causes changing of component\\'s expand/collapse state', function (assert) {\n    assert.expect(9);\n\n    var content = 'Toggler\\'s content';\n    var collapsedCaption = 'Toggler\\'s collapsed caption';\n    var expandedCaption = 'Toggler\\'s expanded caption';\n\n    this.set('content', content);\n    this.set('collapsedCaption', collapsedCaption);\n    this.set('expandedCaption', expandedCaption);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 8,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['content', 'content', ['loc', [null, [7, 6], [7, 17]]]]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 8,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['expanded', ['subexpr', '@mut', [['get', 'expanded', ['loc', [null, [3, 15], [3, 23]]]]], [], []], 'collapsedCaption', ['subexpr', '@mut', [['get', 'collapsedCaption', ['loc', [null, [4, 23], [4, 39]]]]], [], []], 'expandedCaption', ['subexpr', '@mut', [['get', 'expandedCaption', ['loc', [null, [5, 22], [5, 37]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [8, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    // Retrieve component, it's inner <input>.\n    var $component = this.$().children();\n    var $togglerTitle = $component.children('.title');\n    var $togglerCaption = $togglerTitle.children('span');\n    var $togglerContent = $component.children('.content');\n\n    // Check that component is collapsed by default.\n    assert.strictEqual($togglerTitle.hasClass('active'), false);\n    assert.strictEqual($togglerContent.hasClass('active'), false);\n    assert.strictEqual(_ember['default'].$.trim($togglerCaption.text()), collapsedCaption);\n\n    // Expand & check that component is expanded.\n    this.set('expanded', true);\n    assert.strictEqual($togglerTitle.hasClass('active'), true);\n    assert.strictEqual($togglerContent.hasClass('active'), true);\n    assert.strictEqual(_ember['default'].$.trim($togglerCaption.text()), expandedCaption);\n\n    // Collapse & check that component is collapsed.\n    this.set('expanded', false);\n    assert.strictEqual($togglerTitle.hasClass('active'), false);\n    assert.strictEqual($togglerContent.hasClass('active'), false);\n    assert.strictEqual(_ember['default'].$.trim($togglerCaption.text()), collapsedCaption);\n  });\n\n  (0, _emberQunit.test)('disabled animation', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      Hello!\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['caption', 'Click me!', 'duration', 0], 0, null, ['loc', [null, [2, 4], [6, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.notOk(this.$('.flexberry-toggler .content').hasClass('active'));\n\n    this.$('.flexberry-toggler .title').click();\n\n    assert.ok(this.$('.flexberry-toggler .content').hasClass('active'));\n  });\n\n  (0, _emberQunit.test)('loong animation speed', function (assert) {\n    var _this = this;\n\n    assert.expect(3);\n    var done = assert.async();\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 6,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      Hello!\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 6,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-toggler', [], ['caption', 'Click me!', 'duration', 750], 0, null, ['loc', [null, [2, 4], [6, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.$('.flexberry-toggler .title').click();\n\n    assert.ok(this.$('.flexberry-toggler .content').hasClass('animating'));\n    _ember['default'].run.later(function () {\n      assert.ok(_this.$('.flexberry-toggler .content').hasClass('animating'));\n    }, 500);\n    _ember['default'].run.later(function () {\n      assert.notOk(_this.$('.flexberry-toggler .content').hasClass('animating'));\n      done();\n    }, 1000);\n  });\n});","define('dummy/tests/integration/components/flexberry-toggler-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-toggler-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-toggler-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-toggler-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-toggler-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-toggler-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test', ['exports', 'ember-qunit', 'ember-data'], function (exports, _emberQunit, _emberData) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationmessage', 'Integration | Component | flexberry validationmessage', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 52\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', 'error sample'], ['loc', [null, [1, 0], [1, 52]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'error sample');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 31\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-validationmessage', ['loc', [null, [1, 0], [1, 31]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('it color property should pass to classes', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['color', 'someColor'], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('someColor'), true);\n  });\n\n  (0, _emberQunit.test)('it pointing property should pass to classes', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 56\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['pointing', 'left pointing'], ['loc', [null, [1, 0], [1, 56]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('left pointing'), true);\n  });\n\n  (0, _emberQunit.test)('it should throw exception on unknown pointing property', function (assert) {\n    var _this = this;\n\n    assert.throws(function () {\n      _this.render(Ember.HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 64\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-validationmessage', [], ['pointing', 'some unknown pointing'], ['loc', [null, [1, 0], [1, 64]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    });\n  });\n\n  (0, _emberQunit.test)('it should change visibility based on array error value', function (assert) {\n\n    var errors = _emberData['default'].Errors.create();\n    this.set('error', errors.get('somefield'));\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', ['subexpr', '@mut', [['get', 'error', ['loc', [null, [1, 36], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n\n    errors.add('somefield', 'somefield is invalid');\n    this.set('error', errors.get('somefield'));\n\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n\n  (0, _emberQunit.test)('it should change visibility based on string error value', function (assert) {\n\n    this.set('error', '');\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', ['subexpr', '@mut', [['get', 'error', ['loc', [null, [1, 36], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n\n    this.set('error', 'alarma there is error here');\n\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-validationmessage-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-validationmessage-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-validationmessage-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationmessage-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test', ['exports', 'ember-qunit', 'ember-validations/errors'], function (exports, _emberQunit, _emberValidationsErrors) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationsummary', 'Integration | Component | flexberry validationsummary', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('it render error message', function (assert) {\n    var errors = _emberValidationsErrors['default'].create();\n    errors.set('test', ['some validation error message']);\n    this.set('errors', errors);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'some validation error message');\n  });\n\n  (0, _emberQunit.test)('it color property should pass to classes', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 63\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []], 'color', 'someColor'], ['loc', [null, [1, 0], [1, 63]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('someColor'), true);\n  });\n\n  (0, _emberQunit.test)('it should throw exception on unset errors property', function (assert) {\n    var _this = this;\n\n    assert.throws(function () {\n      _this.render(Ember.HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 31\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['content', 'flexberry-validationsummary', ['loc', [null, [1, 0], [1, 31]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    });\n  });\n\n  (0, _emberQunit.test)('it should be invisible if no errors', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n    assert.equal(false, false);\n  });\n\n  (0, _emberQunit.test)('it should be visible if errors presence', function (assert) {\n    var errors = _emberValidationsErrors['default'].create();\n    errors.set('testProperty', ['validation error message']);\n    this.set('errors', errors);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-validationsummary-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-validationsummary-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-validationsummary-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationsummary-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/form-load-time-tracker-test', ['exports', 'ember', 'ember-i18n/services/i18n', 'ember-qunit'], function (exports, _ember, _emberI18nServicesI18n, _emberQunit) {\n\n  var formLoadTimeTracker = _ember['default'].Service.extend({\n    loadTime: 1.0000,\n    renderTime: 2.0000\n  });\n\n  (0, _emberQunit.moduleForComponent)('form-load-time-tracker', 'Integration | Component | form load time tracker', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('service:form-load-time-tracker', formLoadTimeTracker);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.inject.service('form-load-time-tracker', { as: 'formLoadTimeTracker' });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var i18n = this.get('i18n');\n    var loadTimeText = i18n.t('components.form-load-time-tracker.load-time');\n    var renderTimeText = i18n.t('components.form-load-time-tracker.render-time');\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 26\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'form-load-time-tracker', ['loc', [null, [1, 0], [1, 26]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2');\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 38\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('Yield here!');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 65\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['block', 'form-load-time-tracker', [], [], 0, null, ['loc', [null, [1, 0], [1, 65]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n    assert.equal(this.$().text().trim(), loadTimeText + ': 1\\n' + renderTimeText + ': 2\\nYield here!');\n  });\n});","define('dummy/tests/integration/components/form-load-time-tracker-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/form-load-time-tracker-test.js should pass jscs', function () {\n    ok(true, 'integration/components/form-load-time-tracker-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/form-load-time-tracker-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/form-load-time-tracker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-load-time-tracker-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('groupedit-toolbar', 'Integration | Component | groupedit toolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 48\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'groupedit-toolbar', [], ['componentName', 'someName'], ['loc', [null, [1, 0], [1, 48]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'groupedit-toolbar', [], ['componentName', 'someName'], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    //Component does not support template block usage.\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/groupedit-toolbar-test.js should pass jscs', function () {\n    ok(true, 'integration/components/groupedit-toolbar-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/groupedit-toolbar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/groupedit-toolbar-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test', ['exports', 'ember-qunit', 'ember-test-helpers/wait', 'ember'], function (exports, _emberQunit, _emberTestHelpersWait, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('modal-dialog', 'Integration | Component | modal dialog', {\n    integration: true,\n\n    setup: function setup() {\n      var _this = this;\n\n      // detachable need for jquery can do select child components\n      this.set('settings', {\n        detachable: false\n      });\n\n      this.set('created', false);\n      this.set('createdConsumer', function () {\n        _this.set('created', true);\n      });\n\n      _ember['default'].Test.registerWaiter(this, function () {\n        return _this.get('created');\n      });\n    },\n\n    teardown: function teardown() {\n      this.$().modal('hide dimmer');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this2 = this;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'modal-dialog', [], ['settings', ['subexpr', '@mut', [['get', 'settings', ['loc', [null, [2, 29], [2, 37]]]]], [], []], 'created', ['subexpr', '@mut', [['get', 'createdConsumer', ['loc', [null, [2, 46], [2, 61]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal(_this2.$('.description').text().trim(), 'template block text');\n    });\n  });\n\n  (0, _emberQunit.test)('it should not show actions div if no buttons visible', function (assert) {\n    var _this3 = this;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'modal-dialog', [], ['settings', ['subexpr', '@mut', [['get', 'settings', ['loc', [null, [2, 29], [2, 37]]]]], [], []], 'created', ['subexpr', '@mut', [['get', 'createdConsumer', ['loc', [null, [2, 46], [2, 61]]]]], [], []], 'useOkButton', false, 'useCloseButton', false], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal(_this3.$('.actions').length, 0);\n    });\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/modal-dialog-test.js should pass jscs', function () {\n    ok(true, 'integration/components/modal-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/modal-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modal-dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (exports, _ember, _emberQunit, _dummyTestsHelpersStartApp, _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator, _emberFlexberryServicesUserSettings) {\n\n  var App = undefined;\n\n  (0, _emberQunit.moduleForComponent)('object-list-view', 'Integration | Component | object list view', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n'),\n        userSettingsService: _ember['default'].inject.service('user-settings')\n      });\n\n      _emberFlexberryServicesUserSettings['default'].reopen({\n        isUserSettingsServiceEnabled: false\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('columns renders', function (assert) {\n    var _this = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n\n      _this.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n      _this.set('model', model);\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 88\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'object-list-view', [], ['modelProjection', ['subexpr', '@mut', [['get', 'proj', ['loc', [null, [1, 35], [1, 39]]]]], [], []], 'content', ['subexpr', '@mut', [['get', 'model.details', ['loc', [null, [1, 48], [1, 61]]]]], [], []], 'componentName', 'someName'], ['loc', [null, [1, 0], [1, 88]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.notEqual(_this.$().text().trim(), '');\n    });\n  });\n});","define('dummy/tests/integration/components/object-list-view-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/object-list-view-test.js should pass jscs', function () {\n    ok(true, 'integration/components/object-list-view-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/object-list-view-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/object-list-view-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/ui-message-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ui-message', 'Integration | Component | ui-message', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'ui-message', ['loc', [null, [1, 0], [1, 14]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('ui'), true, 'Component\\'s wrapper has \\'ui\\' css-class');\n    assert.strictEqual($component.hasClass('message'), true, 'Component\\'s wrapper has \\' message\\' css-class');\n  });\n\n  (0, _emberQunit.test)('size renders properly', function (assert) {\n    var _this = this;\n\n    assert.expect(8);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['size', ['subexpr', '@mut', [['get', 'size', ['loc', [null, [2, 9], [2, 13]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's syze's types.\n    var sizeTypes = _ember['default'].A(['small', 'large', 'huge', 'massive']);\n    sizeTypes.forEach(function (sizeCssClassName, index) {\n      _this.set('size', sizeCssClassName);\n      assert.strictEqual($component.hasClass(sizeCssClassName), true, 'Component\\'s wrapper has size css-class \\'' + sizeCssClassName + '\\'');\n    });\n\n    this.set('size', '');\n    sizeTypes.forEach(function (sizeCssClassName, index) {\n      assert.strictEqual($component.hasClass(sizeCssClassName), false, 'Component\\'s wrapper hasn\\'t size css-class \\'' + sizeCssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('type renders properly', function (assert) {\n    var _this2 = this;\n\n    assert.expect(12);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['type', ['subexpr', '@mut', [['get', 'type', ['loc', [null, [2, 9], [2, 13]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's type's CSS-classes.\n    var typeCssClasses = _ember['default'].A(['warning', 'info', 'positive', 'success', 'negative', 'error']);\n    typeCssClasses.forEach(function (typeCssClassName, index) {\n      _this2.set('type', typeCssClassName);\n      assert.strictEqual($component.hasClass(typeCssClassName), true, 'Component\\'s wrapper has type css-class \\'' + typeCssClassName + '\\'');\n    });\n\n    this.set('type', '');\n    typeCssClasses.forEach(function (typeCssClassName, index) {\n      assert.strictEqual($component.hasClass(typeCssClassName), false, 'Component\\'s wrapper hasn\\'t type css-class \\'' + typeCssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('color renders properly', function (assert) {\n    var _this3 = this;\n\n    assert.expect(24);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['color', ['subexpr', '@mut', [['get', 'color', ['loc', [null, [2, 10], [2, 15]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check component's color's CSS-classes.\n    var colorCssClasses = _ember['default'].A(['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'black']);\n    colorCssClasses.forEach(function (colorCssClassName, index) {\n      _this3.set('color', colorCssClassName);\n      assert.strictEqual($component.hasClass(colorCssClassName), true, 'Component\\'s wrapper has color css-class \\'' + colorCssClassName + '\\'');\n    });\n\n    this.set('color', '');\n    colorCssClasses.forEach(function (colorCssClassName, index) {\n      assert.strictEqual($component.hasClass(colorCssClassName), false, 'Component\\'s wrapper hasn\\'t color css-class \\'' + colorCssClassName + '\\'');\n    });\n  });\n\n  (0, _emberQunit.test)('floating renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['floating', ['subexpr', '@mut', [['get', 'floating', ['loc', [null, [2, 13], [2, 21]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n\n    this.set('floating', true);\n    assert.strictEqual($component.hasClass('floating'), true, 'Component\\'s wrapper has \\'floating\\' css-class');\n\n    this.set('floating', false);\n    assert.strictEqual($component.hasClass('floating'), false, 'Component\\'s wrapper hasn\\'t \\'floating\\' css-class');\n  });\n\n  (0, _emberQunit.test)('attached renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['attached', ['subexpr', '@mut', [['get', 'attached', ['loc', [null, [2, 13], [2, 21]]]]], [], []]], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // Check wrapper <div>.\n    assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n\n    this.set('attached', true);\n    assert.strictEqual($component.hasClass('attached'), true, 'Component\\'s wrapper has \\'attached\\' css-class');\n\n    this.set('attached', false);\n    assert.strictEqual($component.hasClass('attached'), false, 'Component\\'s wrapper hasn\\'t \\'attached\\' css-class');\n  });\n\n  (0, _emberQunit.test)('visible renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['visible', ['subexpr', '@mut', [['get', 'visible', ['loc', [null, [2, 12], [2, 19]]]]], [], []], 'closeable', true], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    // Component is visible.\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n\n    // The component is hidden by the Close button.\n    _ember['default'].run(function () {\n      $closeableIcon.click();\n    });\n\n    assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n    // Component is visible again.\n    this.set('visible', true);\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n  });\n\n  (0, _emberQunit.test)('closeable renders properly', function (assert) {\n    assert.expect(2);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['closeable', true], ['loc', [null, [1, 0], [3, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    assert.strictEqual($closeableIcon.hasClass('close'), true, 'Component\\'s close icon has css-class \\'close\\'');\n    assert.strictEqual($closeableIcon.hasClass('icon'), true, 'Component\\'s wrapper has css-class \\'icon\\'');\n  });\n\n  (0, _emberQunit.test)('caption & massage renders properly', function (assert) {\n    assert.expect(3);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['caption', 'My caption', 'message', 'My message'], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $captionText = $component.children('div');\n    var $massageText = $component.children('p');\n\n    assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n    assert.strictEqual(_ember['default'].$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n    assert.strictEqual(_ember['default'].$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n  });\n\n  (0, _emberQunit.test)('icon renders properly', function (assert) {\n    assert.expect(7);\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['icon', 'icon paw', 'caption', 'My caption', 'message', 'My message'], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $messageIcon = $component.children('i');\n    var $captionDiv = $component.children('div.content');\n    var $captionText = $captionDiv.children('div.header');\n    var $massageText = $captionDiv.children('p');\n\n    assert.strictEqual($component.hasClass('icon'), true, 'Component\\'s wrapper has \\'icon\\' css-class');\n    assert.strictEqual($messageIcon.hasClass('paw'), true, 'Component\\'s icon has \\'paw\\' css-class');\n    assert.strictEqual($messageIcon.hasClass('icon'), true, 'Component\\'s icon has \\'icon\\' css-class');\n    assert.strictEqual($captionDiv.hasClass('content'), true, 'Component\\'s content block has \\'content\\' css-class');\n    assert.strictEqual($captionText.hasClass('header'), true, 'Component\\'s caption block has \\'header\\' css-class');\n    assert.strictEqual(_ember['default'].$.trim($captionText.text()), 'My caption', 'Component\\'s caption is right');\n    assert.strictEqual(_ember['default'].$.trim($massageText.text()), 'My message', 'Component\\'s message is right');\n  });\n\n  (0, _emberQunit.test)('component sends \\'onHide\\' action', function (assert) {\n    assert.expect(3);\n\n    var messageClose = false;\n    this.set('actions.onClose', function () {\n      messageClose = true;\n    });\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['closeable', true, 'onHide', ['subexpr', 'action', ['onClose'], [], ['loc', [null, [3, 11], [3, 29]]]]], ['loc', [null, [1, 0], [4, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n    var $closeableIcon = $component.children('i');\n\n    // The component is visible.\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper has\\'t css-class \\'hidden\\'');\n\n    // The component is hidden by the Close button.\n    _ember['default'].run(function () {\n      var done = assert.async();\n      $closeableIcon.click();\n      setTimeout(function () {\n        assert.strictEqual(messageClose, true, 'Component closed');\n        assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n        done();\n      }, 50);\n    });\n  });\n\n  (0, _emberQunit.test)('component sends \\'onShow\\' action', function (assert) {\n    assert.expect(4);\n\n    var messageVisible = false;\n    this.set('actions.onVisible', function () {\n      messageVisible = true;\n    });\n\n    // Render component.\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'ui-message', [], ['closeable', true, 'visible', ['subexpr', '@mut', [['get', 'visible', ['loc', [null, [3, 12], [3, 19]]]]], [], []], 'onShow', ['subexpr', 'action', ['onVisible'], [], ['loc', [null, [4, 11], [4, 31]]]]], ['loc', [null, [1, 0], [5, 4]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Retrieve component.\n    var $component = this.$().children();\n\n    // The component is hidden.\n    this.set('visible', false);\n    assert.strictEqual(messageVisible, false, 'Component is not visible');\n    assert.strictEqual($component.hasClass('hidden'), true, 'Component\\'s wrapper has css-class \\'hidden\\'');\n\n    // The component is visible.\n    this.set('visible', true);\n    assert.strictEqual(messageVisible, true, 'Component is visible');\n    assert.strictEqual($component.hasClass('hidden'), false, 'Component\\'s wrapper hasn\\'t css-class \\'hidden\\'');\n  });\n});","define('dummy/tests/integration/components/ui-message-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/ui-message-test.js should pass jscs', function () {\n    ok(true, 'integration/components/ui-message-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/ui-message-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/ui-message-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ui-message-test.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en');\n  test('locales/en/translations.js should pass jscs', function () {\n    ok(true, 'locales/en/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru');\n  test('locales/ru/translations.js should pass jscs', function () {\n    ok(true, 'locales/ru/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-checkbox/settings-example');\n  test('models/components-examples/flexberry-checkbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-checkbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-checkbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-checkbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-datepicker/settings-example');\n  test('models/components-examples/flexberry-datepicker/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-datepicker/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-datepicker/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-datepicker/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-ddau-checkbox/settings-example');\n  test('models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-ddau-checkbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/conditional-render-example');\n  test('models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/conditional-render-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/empty-value-example');\n  test('models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/empty-value-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/settings-example');\n  test('models/components-examples/flexberry-dropdown/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-field/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-field/settings-example');\n  test('models/components-examples/flexberry-field/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-field/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-field/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-field/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-field/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-file/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-file/settings-example');\n  test('models/components-examples/flexberry-file/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-file/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-file/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-file/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-file/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/aggregator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/detail.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/master.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/master.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-simpledatetime/settings-example');\n  test('models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-simpledatetime/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-textarea/settings-example');\n  test('models/components-examples/flexberry-textarea/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-textarea/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-textarea/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textarea/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-textbox/settings-example');\n  test('models/components-examples/flexberry-textbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-textbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-textbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-application-user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-application-user.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-application-user.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-application-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-application-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-application-user.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-comment-vote.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-comment-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-comment-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-comment.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-comment.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-comment.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localization.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-localization.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-localization.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localization.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-localization.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localization.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-localized-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localized-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-parent.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-parent.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-parent.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-parent.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-parent.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-parent.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-successor-phone.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-successor-phone.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-successor-phone.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-successor-phone.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-successor-phone.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-successor-phone.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-successor-social-network.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-successor-social-network.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-successor-social-network.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-successor-social-network.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-successor-social-network.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-successor-social-network.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-file.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion-file.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion-file.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-file.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion-file.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-file.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion-type.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-toggler-example-detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-toggler-example-detail.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-toggler-example-detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-toggler-example-detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-toggler-example-detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-toggler-example-detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-toggler-example-master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-toggler-example-master.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-toggler-example-master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-toggler-example-master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-toggler-example-master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-toggler-example-master.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-vote.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/aggregator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/detail.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/master-dropdown.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/master.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/validation');\n  test('models/integration-examples/edit-form/validation/base.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/validation/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/validation/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/validation');\n  test('models/integration-examples/edit-form/validation/detail.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/validation/detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/validation/detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/validation');\n  test('models/integration-examples/edit-form/validation/master.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/validation/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/validation/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/master.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('resolver.js should pass jscs', function () {\n    ok(true, 'resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('router.js should pass jscs', function () {\n    ok(true, 'router.js should pass jscs.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/application.js should pass jscs', function () {\n    ok(true, 'routes/application.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-acceptance-tests/flexberry-checkbox');\n  test('routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jscs', function () {\n    ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-edit-with-checked-checkbox.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-acceptance-tests/flexberry-checkbox');\n  test('routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jscs', function () {\n    ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-checkbox/ember-flexberry-dummy-suggestion-list-with-checked-checkbox.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/base-operations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-acceptance-tests/flexberry-objectlistview');\n  test('routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jscs', function () {\n    ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/base-operations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/base-operations.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/date-format.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-acceptance-tests/flexberry-objectlistview');\n  test('routes/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jscs', function () {\n    ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/date-format.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-acceptance-tests/flexberry-objectlistview/date-format.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/date-format.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-acceptance-tests/flexberry-objectlistview');\n  test('routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jscs', function () {\n    ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-acceptance-tests/flexberry-objectlistview/folv-paging.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-button/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-button');\n  test('routes/components-examples/flexberry-button/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-button/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-button/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-button/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-button/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-checkbox');\n  test('routes/components-examples/flexberry-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-datepicker');\n  test('routes/components-examples/flexberry-datepicker/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-datepicker/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-datepicker/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-datepicker/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-ddau-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-ddau-checkbox');\n  test('routes/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-ddau-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-ddau-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-ddau-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/conditional-render-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/empty-value-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-field/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-field');\n  test('routes/components-examples/flexberry-field/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-field/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-field/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-field/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-field/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-file/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-file');\n  test('routes/components-examples/flexberry-file/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-file/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-file/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-file/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-file/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/configurate-row-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-groupedit');\n  test('routes/components-examples/flexberry-groupedit/configurate-row-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-groupedit/configurate-row-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/configurate-row-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-groupedit/configurate-row-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/configurate-row-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-groupedit');\n  test('routes/components-examples/flexberry-groupedit/model-update-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-groupedit/model-update-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-groupedit/model-update-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/model-update-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-groupedit');\n  test('routes/components-examples/flexberry-groupedit/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-groupedit/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-groupedit/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/autocomplete-order-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/autocomplete-order-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/autocomplete-order-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/autocomplete-order-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/customizing-window-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/default-ordering-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/default-ordering-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/default-ordering-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/default-ordering-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/default-ordering-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/default-ordering-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/dropdown-mode-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/limit-function-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/limit-function-through-dynamic-properties-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/lookup-block-form-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/lookup-in-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-menu/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-menu');\n  test('routes/components-examples/flexberry-menu/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-menu/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-menu/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-menu/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-menu/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/downloading-files-from-olv-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit');\n  test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/edit-form-with-detail-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/hierarchy-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/hierarchy-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/hierarchy-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/hierarchy-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/parent-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-phone-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/inheritance-models');\n  test('routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/inheritance-models/successor-social-network-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/object-list-view-resize.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/object-list-view-resize.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/object-list-view-resize.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/object-list-view-resize.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/on-edit-form');\n  test('routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/selected-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/selected-rows.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/selected-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/selected-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/selected-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/selected-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpledatetime');\n  test('routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpledatetime/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/configurate-rows.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/custom-filter.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/limit-function-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/on-edit-form.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv/on-edit-form');\n  test('routes/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/selected-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/selected-rows.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/selected-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/selected-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/selected-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/selected-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpleolv');\n  test('routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpleolv/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-textarea');\n  test('routes/components-examples/flexberry-textarea/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-textarea/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-textarea/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textarea/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-textbox');\n  test('routes/components-examples/flexberry-textbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-textbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-textbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/ge-into-toggler-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-toggler');\n  test('routes/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/ge-into-toggler-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-toggler/ge-into-toggler-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/ge-into-toggler-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-toggler');\n  test('routes/components-examples/flexberry-toggler/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-toggler/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-toggler/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-tree/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-tree');\n  test('routes/components-examples/flexberry-tree/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-tree/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-tree/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-tree/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-tree/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/ui-message/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/ui-message');\n  test('routes/components-examples/ui-message/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/ui-message/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/ui-message/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/ui-message/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/ui-message/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-application-user-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-application-user-edit');\n  test('routes/ember-flexberry-dummy-application-user-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-application-user-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-comment-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-comment-edit');\n  test('routes/ember-flexberry-dummy-comment-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-comment-vote-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-vote-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-comment-vote-edit');\n  test('routes/ember-flexberry-dummy-comment-vote-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-vote-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-vote-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-vote-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-localization-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-localization-edit');\n  test('routes/ember-flexberry-dummy-localization-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-localization-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-suggestion-edit');\n  test('routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-suggestion-type-edit');\n  test('routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-type-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-toggler-example-master-e.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-toggler-example-master-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-toggler-example-master-e');\n  test('routes/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-toggler-example-master-e/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-toggler-example-master-e/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-toggler-example-master-e/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/index.js should pass jscs', function () {\n    ok(true, 'routes/index.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/readonly-mode.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/integration-examples/edit-form');\n  test('routes/integration-examples/edit-form/readonly-mode.js should pass jscs', function () {\n    ok(true, 'routes/integration-examples/edit-form/readonly-mode.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/readonly-mode.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/integration-examples/edit-form/readonly-mode.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/readonly-mode.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/validation.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/integration-examples/edit-form');\n  test('routes/integration-examples/edit-form/validation.js should pass jscs', function () {\n    ok(true, 'routes/integration-examples/edit-form/validation.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/integration-examples/edit-form/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/validation.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/log-service-examples/clear-log-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/log-service-examples');\n  test('routes/log-service-examples/clear-log-form.js should pass jscs', function () {\n    ok(true, 'routes/log-service-examples/clear-log-form.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/log-service-examples/clear-log-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/log-service-examples/clear-log-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/log-service-examples/clear-log-form.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/log-service-examples/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/log-service-examples');\n  test('routes/log-service-examples/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/log-service-examples/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/log-service-examples/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/log-service-examples/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/log-service-examples/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/user-setting-forms/user-setting-delete.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/user-setting-forms');\n  test('routes/user-setting-forms/user-setting-delete.js should pass jscs', function () {\n    ok(true, 'routes/user-setting-forms/user-setting-delete.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/user-setting-forms/user-setting-delete.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/user-setting-forms/user-setting-delete.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/user-setting-forms/user-setting-delete.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/application.js should pass jscs', function () {\n    ok(true, 'serializers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-application-user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-application-user.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-application-user.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-application-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-application-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-application-user.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-comment-vote.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-comment-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-comment-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-comment.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-comment.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-comment.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localization.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-localization.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-localization.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localization.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-localization.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localization.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-localized-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-parent.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-parent.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-parent.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-parent.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-parent.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-parent.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-successor-phone.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-successor-phone.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-successor-phone.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-successor-phone.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-successor-phone.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-successor-phone.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-successor-social-network.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-successor-social-network.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-successor-social-network.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-successor-social-network.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-successor-social-network.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-successor-social-network.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion-file.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion-file.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion-file.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-file.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion-type.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-toggler-example-detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-toggler-example-detail.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-toggler-example-detail.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-toggler-example-detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-toggler-example-detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-toggler-example-detail.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-toggler-example-master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-toggler-example-master.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-toggler-example-master.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-toggler-example-master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-toggler-example-master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-toggler-example-master.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-vote.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/services/store.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/store.js should pass jscs', function () {\n    ok(true, 'services/store.js should pass jscs.');\n  });\n});","define('dummy/tests/services/store.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/store.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/store.js should pass jshint.');\n  });\n});","define('dummy/tests/services/user-settings.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/user-settings.js should pass jscs', function () {\n    ok(true, 'services/user-settings.js should pass jscs.');\n  });\n});","define('dummy/tests/services/user-settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/user-settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/user-settings.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('test-helper.js should pass jscs', function () {\n    ok(true, 'test-helper.js should pass jscs.');\n  });\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-dropdown/conditional-render-example');\n  test('transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-dropdown/settings-example');\n  test('transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-groupedit/shared');\n  test('transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-gender.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms');\n  test('transforms/ember-flexberry-dummy-gender.js should pass jscs', function () {\n    ok(true, 'transforms/ember-flexberry-dummy-gender.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-gender.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/ember-flexberry-dummy-gender.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-gender.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-vote-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms');\n  test('transforms/ember-flexberry-dummy-vote-type.js should pass jscs', function () {\n    ok(true, 'transforms/ember-flexberry-dummy-vote-type.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-vote-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/ember-flexberry-dummy-vote-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-vote-type.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/integration-examples/edit-form/readonly-mode');\n  test('transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/integration-examples/edit-form/readonly-mode/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/integration-examples/edit-form/validation');\n  test('transforms/integration-examples/edit-form/validation/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/integration-examples/edit-form/validation/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/integration-examples/edit-form/validation/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/validation/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'ApplicationAdapter', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dummy/tests/unit/adapters/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/adapters');\n  test('unit/adapters/application-test.js should pass jscs', function () {\n    ok(true, 'unit/adapters/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:new-platform-flexberry-services-lock', 'Unit | Adapter | new-platform-flexberry-services-lock');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/adapters');\n  test('unit/adapters/new-platform-flexberry-services-lock-test.js should pass jscs', function () {\n    ok(true, 'unit/adapters/new-platform-flexberry-services-lock-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/adapters/new-platform-flexberry-services-lock-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/new-platform-flexberry-services-lock-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/new-platform-flexberry-services-lock-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/application-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:detail-edit-form', 'Unit | Controller | detail edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/detail-edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/detail-edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/detail-edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/detail-edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test', ['exports', 'ember', 'ember-data', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (exports, _ember, _emberData, _emberQunit, _dummyTestsHelpersStartApp) {\n\n  var App;\n\n  (0, _emberQunit.moduleFor)('controller:edit-form', 'Unit | Controller | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n      _ember['default'].$.mockjax.clear();\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('save hasMany relationships recursively', function (assert) {\n    var savedRecords = [];\n\n    var TestModel = _emberData['default'].Model.extend({\n      save: function save() {\n        var _this = this;\n\n        return new _ember['default'].RSVP.Promise(function (resolve) {\n          savedRecords.push(_this);\n          resolve(_this);\n        });\n      }\n    });\n\n    var Model1 = TestModel.extend({\n      hasManyModel2: _emberData['default'].hasMany('model2')\n    });\n\n    var Model2 = TestModel.extend({\n      hasManyModel3: _emberData['default'].hasMany('model3')\n    });\n\n    var Model3 = TestModel.extend({});\n\n    App.register('model:model1', Model1);\n    App.register('model:model2', Model2);\n    App.register('model:model3', Model3);\n\n    var controller = this.subject();\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var record = store.createRecord('model1');\n      var model21 = store.createRecord('model2');\n      var model22 = store.createRecord('model2');\n      record.get('hasManyModel2').pushObjects([model21, model22]);\n      var model31 = store.createRecord('model3');\n      model22.get('hasManyModel3').pushObjects([model31]);\n\n      controller.set('model', record);\n      controller._saveHasManyRelationships(record).then(function () {\n        assert.equal(savedRecords[0], model21);\n        assert.equal(savedRecords[1], model22);\n        assert.equal(savedRecords[2], model31);\n      });\n\n      wait();\n    });\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:flexberry-file-view-dialog', 'Unit | Controller | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/flexberry-file-view-dialog-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/flexberry-file-view-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/flexberry-file-view-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/flexberry-file-view-dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/list-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:list-form', 'Unit | Controller | list form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/list-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/list-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/list-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/list-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/list-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/list-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test', ['exports', 'ember-qunit', 'ember', 'sinon'], function (exports, _emberQunit, _ember, _sinon) {\n\n  (0, _emberQunit.moduleFor)('controller:lookup-dialog', 'Unit | Controller | lookup dialog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('it shold set selected record to saveTo.propName of saveTo.model', function (assert) {\n    var model = _ember['default'].Object.extend({ makeDirty: function makeDirty() {} }).create();\n    var saveTo = {\n      model: model,\n      propName: 'testProperty'\n    };\n\n    var controller = this.subject();\n    controller.set('saveTo', saveTo);\n\n    _sinon['default'].stub(model, 'makeDirty');\n    _sinon['default'].stub(controller, '_closeModalDialog');\n    var master = _ember['default'].Object.create();\n\n    controller.send('objectListViewRowClick', master);\n\n    assert.equal(model.get('testProperty'), master);\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/lookup-dialog-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/lookup-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/lookup-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/lookup-dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:new-platform-flexberry-services-lock-list', 'Unit | Controller | new-platform-flexberry-services-lock-list');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/new-platform-flexberry-services-lock-list-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/new-platform-flexberry-services-lock-list-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/new-platform-flexberry-services-lock-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/new-platform-flexberry-services-lock-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new-platform-flexberry-services-lock-list-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/helpers/readonly-cell-test', ['exports', 'ember', 'dummy/helpers/readonly-cell', 'qunit'], function (exports, _ember, _dummyHelpersReadonlyCell, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | readonly cell');\n\n  (0, _qunit.test)('it works', function (assert) {\n    _ember['default'].run(function () {\n      var result = (0, _dummyHelpersReadonlyCell.readonlyCell)([['test'], 'test', false]);\n      assert.ok(result);\n    });\n  });\n});","define('dummy/tests/unit/helpers/readonly-cell-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/helpers');\n  test('unit/helpers/readonly-cell-test.js should pass jscs', function () {\n    ok(true, 'unit/helpers/readonly-cell-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/helpers/readonly-cell-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/readonly-cell-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/readonly-cell-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/i18n-test', ['exports', 'ember', 'dummy/initializers/i18n', 'qunit'], function (exports, _ember, _dummyInitializersI18n, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dummyInitializersI18n['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/i18n-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/i18n-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/i18n-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/i18n-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/i18n-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/i18n-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/render-perf-logger-test', ['exports', 'ember', 'dummy/initializers/render-perf-logger', 'qunit'], function (exports, _ember, _dummyInitializersRenderPerfLogger, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | render perf logger', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dummyInitializersRenderPerfLogger['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/render-perf-logger-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/render-perf-logger-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/render-perf-logger-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/render-perf-logger-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/render-perf-logger-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/render-perf-logger-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/i18n-test', ['exports', 'ember', 'ember-flexberry/instance-initializers/i18n', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _ember, _emberFlexberryInstanceInitializersI18n, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n\n  var application = undefined;\n  var appInstance = undefined;\n  var fakeLocale = undefined;\n\n  (0, _qunit.module)('Unit | Instance Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      application = (0, _dummyTestsHelpersStartApp['default'])();\n      appInstance = application.buildInstance();\n\n      // Set 'fake-locale' as default i18n-service locale.\n      var i18n = appInstance.lookup('service:i18n');\n      fakeLocale = 'fake-locale';\n      i18n.set('locale', fakeLocale);\n    },\n    afterEach: function afterEach() {\n      (0, _dummyTestsHelpersDestroyApp['default'])(appInstance);\n      (0, _dummyTestsHelpersDestroyApp['default'])(application);\n    }\n  });\n\n  (0, _qunit.test)('Configures i18n service for locale', function (assert) {\n    assert.expect(2);\n\n    var i18n = appInstance.lookup('service:i18n');\n    var ENV = appInstance._lookupFactory('config:environment');\n    var defaultLocale = (ENV.i18n || {}).defaultLocale;\n\n    assert.strictEqual(i18n.get('locale'), fakeLocale, 'Default i18n-service locale is \\'' + fakeLocale + '\\'');\n\n    var currentLocale = defaultLocale ? defaultLocale : window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.userLanguage;\n\n    var locales = appInstance.lookup('controller:application').get('locales');\n    if (!locales || _ember['default'].typeOf(locales) !== 'array' || locales.indexOf(currentLocale) === -1 || _ember['default'].isBlank(currentLocale)) {\n      currentLocale = 'en';\n    }\n\n    _emberFlexberryInstanceInitializersI18n['default'].initialize(appInstance);\n\n    assert.strictEqual(i18n.get('locale'), currentLocale, 'Current i18n-service locale is \\'' + currentLocale + '\\'');\n  });\n});","define('dummy/tests/unit/instance-initializers/i18n-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/instance-initializers');\n  test('unit/instance-initializers/i18n-test.js should pass jscs', function () {\n    ok(true, 'unit/instance-initializers/i18n-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/instance-initializers/i18n-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/instance-initializers/i18n-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/i18n-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/lock-test', ['exports', 'ember', 'dummy/instance-initializers/lock', 'qunit', 'dummy/tests/helpers/destroy-app'], function (exports, _ember, _dummyInstanceInitializersLock, _qunit, _dummyTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | lock', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _dummyInstanceInitializersLock.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/instance-initializers/lock-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/instance-initializers');\n  test('unit/instance-initializers/lock-test.js should pass jscs', function () {\n    ok(true, 'unit/instance-initializers/lock-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/instance-initializers/lock-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/instance-initializers/lock-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/lock-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/moment-test', ['exports', 'ember-flexberry/instance-initializers/moment', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _emberFlexberryInstanceInitializersMoment, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n\n  var application = undefined;\n  var appInstance = undefined;\n  var defaultLocale = undefined;\n  var defaultFormat = undefined;\n\n  (0, _qunit.module)('Unit | Instance Initializer | moment', {\n    beforeEach: function beforeEach() {\n      application = (0, _dummyTestsHelpersStartApp['default'])();\n      appInstance = application.buildInstance();\n\n      // Run instance-initializer.\n      _emberFlexberryInstanceInitializersMoment['default'].initialize(appInstance);\n\n      // Set 'en' as default locale.\n      var i18n = appInstance.lookup('service:i18n');\n      defaultLocale = 'en';\n      i18n.set('locale', defaultLocale);\n\n      // Set 'DD.MM.YYYY' as default date format.\n      var moment = appInstance.lookup('service:moment');\n      defaultFormat = 'DD.MM.YYYY';\n      moment.set('defaultFormat', defaultFormat);\n    },\n    afterEach: function afterEach() {\n      (0, _dummyTestsHelpersDestroyApp['default'])(appInstance);\n      (0, _dummyTestsHelpersDestroyApp['default'])(application);\n    }\n  });\n\n  (0, _qunit.test)('Changes in i18n-service locale causes same changes in moment-service & in global moment object', function (assert) {\n    assert.expect(4);\n\n    var i18n = appInstance.lookup('service:i18n');\n    var moment = appInstance.lookup('service:moment');\n\n    assert.strictEqual(moment.get('locale'), defaultLocale, 'Initial locale in moment service is equals to \\'' + defaultLocale + '\\'');\n    assert.strictEqual(window.moment.locale(), defaultLocale, 'Initial locale in window.moment object is equals to \\'' + defaultLocale + '\\'');\n\n    var newLocale = 'ru';\n    i18n.set('locale', newLocale);\n\n    assert.strictEqual(moment.get('locale'), newLocale, 'Initial locale in moment service is equals to \\'' + newLocale + '\\'');\n    assert.strictEqual(window.moment.locale(), newLocale, 'Initial locale in window.moment object is equals to \\'' + newLocale + '\\'');\n  });\n\n  (0, _qunit.test)('Changes in moment-service default format causes same changes in global moment object', function (assert) {\n    assert.expect(4);\n\n    var moment = appInstance.lookup('service:moment');\n\n    assert.strictEqual(moment.get('defaultFormat'), defaultFormat, 'Initial locale in moment service is equals to \\'' + defaultFormat + '\\'');\n    assert.strictEqual(window.moment.defaultFormat, defaultFormat, 'Initial locale in window.moment object is equals to \\'' + defaultFormat + '\\'');\n\n    var newDefaultFormat = 'MMMM Do YYYY, h:mm:ss a';\n    moment.set('defaultFormat', newDefaultFormat);\n\n    assert.strictEqual(moment.get('defaultFormat'), newDefaultFormat, 'Initial locale in moment service is equals to \\'' + newDefaultFormat + '\\'');\n    assert.strictEqual(window.moment.defaultFormat, newDefaultFormat, 'Initial locale in window.moment object is equals to \\'' + newDefaultFormat + '\\'');\n  });\n});","define('dummy/tests/unit/instance-initializers/moment-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/instance-initializers');\n  test('unit/instance-initializers/moment-test.js should pass jscs', function () {\n    ok(true, 'unit/instance-initializers/moment-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/instance-initializers/moment-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/instance-initializers/moment-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/moment-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-actions-test', ['exports', 'ember', 'ember-flexberry/mixins/dynamic-actions', 'ember-flexberry/objects/dynamic-action', 'qunit'], function (exports, _ember, _emberFlexberryMixinsDynamicActions, _emberFlexberryObjectsDynamicAction, _qunit) {\n  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n  var ClassWithDynamicActionsMixin = _ember['default'].Object.extend(_emberFlexberryMixinsDynamicActions['default'], {});\n  var ComponentWithDynamicActionsMixin = _ember['default'].Component.extend(_emberFlexberryMixinsDynamicActions['default'], {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-actions mixin');\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if it\\'s owner hasn\\'t \\'sendAction\\' method', function (assert) {\n    assert.expect(1);\n\n    try {\n      ClassWithDynamicActionsMixin.create({ dynamicActions: [] });\n    } catch (ex) {\n      assert.strictEqual(/wrong\\s*type\\s*of\\s*.*sendAction.*/gi.test(ex.message), true, 'Throws assertion failed exception if owner hasn\\'t \\'sendAction\\' method');\n    }\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicActions\\' is not array', function (assert) {\n    var wrongDynamicActionsArray = _ember['default'].A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongDynamicActionsArray.length);\n\n    wrongDynamicActionsArray.forEach(function (wrongDynamicActions) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: wrongDynamicActions\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicActions.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicActions\\' property is \\'' + _ember['default'].typeOf(wrongDynamicActions) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'on\\' property', function (assert) {\n    var wrongOnPropertiesArray = _ember['default'].A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongOnPropertiesArray.length);\n\n    wrongOnPropertiesArray.forEach(function (wrongOnProperty) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n          on: wrongOnProperty,\n          actionHandler: null,\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })])\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*on.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'on\\' property of wrong type \\'' + _ember['default'].typeOf(wrongOnProperty) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionHandler\\' property', function (assert) {\n    var wrongActionHandlersArray = _ember['default'].A([1, true, false, 'some string', {}, [], new Date(), new RegExp()]);\n\n    assert.expect(wrongActionHandlersArray.length);\n\n    wrongActionHandlersArray.forEach(function (wrongActionHandler) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n          on: 'someAction',\n          actionHandler: wrongActionHandler,\n          actionName: null,\n          actionContext: null,\n          actionArguments: null\n        })])\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionHandler.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionHandler\\' property of wrong type \\'' + _ember['default'].typeOf(wrongActionHandler) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionName\\' property', function (assert) {\n    var wrongActionNamesArray = _ember['default'].A([1, true, false, {}, [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongActionNamesArray.length);\n\n    wrongActionNamesArray.forEach(function (wrongActionName) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: wrongActionName,\n          actionContext: null,\n          actionArguments: null\n        })])\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionName.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionName\\' property of wrong type \\'' + _ember['default'].typeOf(wrongActionName) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', but' + ' wrong \\'actionContext\\' property (without \\'send\\' method)', function (assert) {\n    var wrongActionContextsArray = _ember['default'].A([null, 1, true, false, {}, [], function () {}, new Date(), new RegExp(), { send: function send() {} }]);\n\n    // Assertion shouldn't be send for last object containing 'send' method,\n    // that's why length - 1.\n    assert.expect(wrongActionContextsArray.length - 1);\n\n    wrongActionContextsArray.forEach(function (wrongActionContext) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: 'onSomeAction',\n          actionContext: wrongActionContext,\n          actionArguments: null\n        })])\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/method\\s*.*send.*\\s*.*actionContext.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has defined \\'actionName\\', ' + 'but wrong \\'actionContext\\' property (without \\'send\\' method)');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if one of specified \\'dynamicActions\\' has wrong \\'actionArguments\\' property', function (assert) {\n    var wrongActionArgumentsArray = _ember['default'].A([1, true, false, 'some string', {}, function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongActionArgumentsArray.length);\n\n    wrongActionArgumentsArray.forEach(function (wrongActionArguments) {\n      var component = ComponentWithDynamicActionsMixin.create({\n        attrs: {},\n        dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n          on: 'someAction',\n          actionHandler: null,\n          actionName: null,\n          actionContext: null,\n          actionArguments: wrongActionArguments\n        })])\n      });\n\n      try {\n        component.sendAction('someAction');\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*actionArguments.*/gi.test(ex.message), true, 'Throws assertion failed exception if one of specified \\'dynamicActions\\' has \\'actionArguments\\' property of wrong type \\'' + _ember['default'].typeOf(wrongActionArguments) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin does\\'t break it\\'s owner\\'s standard \\'sendAction\\' logic', function (assert) {\n    assert.expect(1);\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: null,\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      })])\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendAction('someAction');\n\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n  });\n\n  (0, _qunit.test)('Mixin triggers specified \\'dynamicActions\\' handlers (\\'actionHandler\\' callbacks only) ' + 'if \\'actionContext\\' isn\\'t specified', function (assert) {\n    assert.expect(10);\n\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someAnotherActionDynamicHandlerHasBeenCalled = false;\n    var someActionAgainDynamicHandlerHasBeenCalled = false;\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      }), _emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAnotherAction',\n        actionHandler: function actionHandler() {\n          someAnotherActionDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      }), _emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionAgainDynamicHandlerHasBeenCalled = true;\n        },\n        actionName: null,\n        actionContext: null,\n        actionArguments: null\n      })])\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    var someAnotherActionHandlerHasBeenCalled = false;\n    component.attrs.someAnotherAction = function () {\n      someAnotherActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someAnotherActionHandlerHasBeenCalled = false;\n    someAnotherActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionAgainDynamicHandlerHasBeenCalled = false;\n\n    component.sendAction('someAnotherAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'anotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin triggers all specified \\'dynamicActions\\' handlers (callbacks & normal actions) on given context', function (assert) {\n    assert.expect(22);\n\n    var someActionControllersHandlerHasBeenCalled = false;\n    var someActionControllersHandlerContext = null;\n\n    var someAnoterActionControllersHandlerHasBeenCalled = false;\n    var someAnotherActionControllersHandlerContext = null;\n\n    var someActionAgainControllersHandlerHasBeenCalled = false;\n    var someActionAgainControllersHandlerContext = null;\n\n    var controller = _ember['default'].Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          someActionControllersHandlerHasBeenCalled = true;\n          someActionControllersHandlerContext = this;\n        },\n\n        onSomeAnotherAction: function onSomeAnotherAction() {\n          someAnoterActionControllersHandlerHasBeenCalled = true;\n          someAnotherActionControllersHandlerContext = this;\n        },\n\n        onSomeActionAgain: function onSomeActionAgain() {\n          someActionAgainControllersHandlerHasBeenCalled = true;\n          someActionAgainControllersHandlerContext = this;\n        }\n      }\n    }).create();\n\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someActionDynamicHandlerContext = null;\n\n    var someAnotherActionDynamicHandlerHasBeenCalled = false;\n    var someAnotherActionDynamicHandlerContext = null;\n\n    var someActionAgainDynamicHandlerHasBeenCalled = false;\n    var someActionAgainDynamicHandlerContext = null;\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionDynamicHandlerHasBeenCalled = true;\n          someActionDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeAction',\n        actionContext: controller,\n        actionArguments: null\n      }), _emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAnotherAction',\n        actionHandler: function actionHandler() {\n          someAnotherActionDynamicHandlerHasBeenCalled = true;\n          someAnotherActionDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeAnotherAction',\n        actionContext: controller,\n        actionArguments: null\n      }), _emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          someActionAgainDynamicHandlerHasBeenCalled = true;\n          someActionAgainDynamicHandlerContext = this;\n        },\n        actionName: 'onSomeActionAgain',\n        actionContext: controller,\n        actionArguments: null\n      })])\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    var someAnotherActionHandlerHasBeenCalled = false;\n    component.attrs.someAnotherAction = function () {\n      someAnotherActionHandlerHasBeenCalled = true;\n    };\n\n    component.sendAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to ' + 'yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, true, 'Component triggers specified in dynamic action another \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionAgainControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someAnotherActionHandlerHasBeenCalled = false;\n\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerContext = null;\n\n    someAnotherActionDynamicHandlerHasBeenCalled = false;\n    someAnotherActionDynamicHandlerContext = null;\n\n    someActionAgainDynamicHandlerHasBeenCalled = false;\n    someActionAgainDynamicHandlerContext = null;\n\n    someActionControllersHandlerHasBeenCalled = false;\n    someActionControllersHandlerContext = null;\n\n    someAnoterActionControllersHandlerHasBeenCalled = false;\n    someAnotherActionControllersHandlerContext = null;\n\n    someActionAgainControllersHandlerHasBeenCalled = false;\n    someActionAgainControllersHandlerContext = null;\n\n    component.sendAction('someAnotherAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, false, 'Component still normally doesn\\'t trigger proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions) for yet unsended actions');\n    assert.strictEqual(someAnotherActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers ' + '(binded explicitly with ember API, not with dynamic actions)');\n\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerHasBeenCalled, true, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded to yet unsended \\'someAnotherAction\\'');\n    assert.strictEqual(someAnotherActionDynamicHandlerContext, controller, 'Component triggers specified in dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionAgainDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in dynamic action \\'actionHandler\\' binded ' + 'to yet unsended \\'someAction\\'');\n\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded ' + 'to yet unsended \\'someAction\\'');\n    assert.strictEqual(someAnoterActionControllersHandlerHasBeenCalled, true, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\'');\n    assert.strictEqual(someAnotherActionControllersHandlerContext, controller, 'Component triggers on given \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAnotherAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionAgainControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on given \\'actionContext\\' action with specified \\'actionName\\' binded to ' + 'yet unsended \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin works properly with \\'dynamicActions\\' added/removed after component initialization', function (assert) {\n    assert.expect(8);\n\n    // Define component without any dynamic actions.\n    var dynamicActions = _ember['default'].A();\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: dynamicActions\n    });\n\n    // Define controller.\n    var someActionControllersHandlerHasBeenCalled = false;\n    var someActionControllersHandlerContext = null;\n    var controller = _ember['default'].Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          someActionControllersHandlerHasBeenCalled = true;\n          someActionControllersHandlerContext = this;\n        }\n      }\n    }).create();\n\n    // Define dynamic action.\n    var someActionDynamicHandlerHasBeenCalled = false;\n    var someActionDynamicHandlerContext = null;\n    var someDynamicAction = _emberFlexberryObjectsDynamicAction['default'].create({\n      on: 'someAction',\n      actionHandler: function actionHandler() {\n        someActionDynamicHandlerHasBeenCalled = true;\n        someActionDynamicHandlerContext = this;\n      },\n      actionName: 'onSomeAction',\n      actionContext: controller,\n      actionArguments: null\n    });\n\n    var someActionHandlerHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      someActionHandlerHasBeenCalled = true;\n    };\n\n    // Add defined dynamic action to a component after it has been already initialized.\n    dynamicActions.pushObject(someDynamicAction);\n\n    // Check that all handlers were called with expected context.\n    component.sendAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, true, 'Component triggers specified in added dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionDynamicHandlerContext, controller, 'Component triggers specified in added dynamic action \\'actionHandler\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, true, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerContext, controller, 'Component triggers on added dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\' with specified \\'actionContext\\'');\n\n    someActionHandlerHasBeenCalled = false;\n    someActionDynamicHandlerHasBeenCalled = false;\n    someActionDynamicHandlerContext = false;\n    someActionControllersHandlerHasBeenCalled = false;\n    someActionControllersHandlerContext = false;\n\n    // Remove defined dynamic action to a component after it has been already initialized.\n    dynamicActions.removeObject(someDynamicAction);\n    component.sendAction('someAction');\n    assert.strictEqual(someActionHandlerHasBeenCalled, true, 'Component still normally triggers proper action handlers (binded explicitly with ember API, not with dynamic actions)');\n    assert.strictEqual(someActionDynamicHandlerHasBeenCalled, false, 'Component doesn\\'t trigger specified in removed dynamic action \\'actionHandler\\' for component\\'s \\'someAction\\'');\n    assert.strictEqual(someActionControllersHandlerHasBeenCalled, false, 'Component doesn\\'t trigger on removed dynamic action\\'s \\'actionContext\\' action with specified \\'actionName\\' for ' + 'component\\'s \\'someAction\\'');\n  });\n\n  (0, _qunit.test)('Mixin adds specified in \\'dynamicActions\\' \\'actionArguments\\' to the beginning of handler\\'s arguments array', function (assert) {\n    assert.expect(3);\n\n    var dynamicActionArguments = _ember['default'].A(['firstDynamicArgument', 'secondDynamicArgument']);\n\n    var someActionHandlerArguments = null;\n    var someActionDynamicHandlerArguments = null;\n    var someActionDynamicControllersHandlerArguments = null;\n\n    var controller = _ember['default'].Controller.extend({\n      actions: {\n        onSomeAction: function onSomeAction() {\n          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          someActionDynamicControllersHandlerArguments = _ember['default'].A(args);\n        }\n      }\n    }).create();\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {},\n      dynamicActions: _ember['default'].A([_emberFlexberryObjectsDynamicAction['default'].create({\n        on: 'someAction',\n        actionHandler: function actionHandler() {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          someActionDynamicHandlerArguments = _ember['default'].A(args);\n        },\n        actionName: 'onSomeAction',\n        actionContext: controller,\n        actionArguments: dynamicActionArguments\n      })])\n    });\n\n    component.attrs.someAction = function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      someActionHandlerArguments = _ember['default'].A(args);\n    };\n\n    // Check that all handlers were called with expected arguments.\n    var originalActionArguments = _ember['default'].A(['firstOriginalArgument', 'secondOriginalArgument']);\n    component.sendAction.apply(component, ['someAction'].concat(_toConsumableArray(originalActionArguments)));\n    assert.strictEqual(someActionHandlerArguments[0] === originalActionArguments[0] && someActionHandlerArguments[1] === originalActionArguments[1], true, 'Component\\'s original action handler doesn\\'t contain additional \\'actionArguments\\' from \\'dynamicActions\\' (only original arguments)');\n    assert.strictEqual(someActionDynamicHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicHandlerArguments[2] === originalActionArguments[0] && someActionDynamicHandlerArguments[3] === originalActionArguments[1], true, 'Component\\'s dynamic action handler contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n    assert.strictEqual(someActionDynamicControllersHandlerArguments[0] === dynamicActionArguments[0] && someActionDynamicControllersHandlerArguments[1] === dynamicActionArguments[1] && someActionDynamicControllersHandlerArguments[2] === originalActionArguments[0] && someActionDynamicControllersHandlerArguments[3] === originalActionArguments[1], true, 'Action handler with specified \\'actionName\\' contains additional \\'actionArguments\\' from \\'dynamicActions\\'');\n  });\n\n  (0, _qunit.test)('Mixin doesn\\'t trigger component\\'s inner method if outer action handler is not defined', function (assert) {\n    assert.expect(2);\n\n    var component = ComponentWithDynamicActionsMixin.create({\n      attrs: {}\n    });\n\n    var innerSomeActionHasBeenCalled = false;\n    component.someAction = function () {\n      innerSomeActionHasBeenCalled = true;\n    };\n\n    component.sendAction('someAction');\n    assert.strictEqual(innerSomeActionHasBeenCalled, false, 'Component doesn\\'t trigger inner \\'someAction\\' method');\n\n    var outerSomeActionHasBeenCalled = false;\n    component.attrs.someAction = function () {\n      outerSomeActionHasBeenCalled = true;\n    };\n\n    component.sendAction('someAction');\n    assert.strictEqual(outerSomeActionHasBeenCalled && !innerSomeActionHasBeenCalled, true, 'Component trigger\\'s outer \\'someAction\\' handler');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-actions-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/dynamic-actions-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/dynamic-actions-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-actions-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/dynamic-actions-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dynamic-actions-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test', ['exports', 'ember', 'ember-flexberry/mixins/dynamic-properties', 'qunit'], function (exports, _ember, _emberFlexberryMixinsDynamicProperties, _qunit) {\n\n  var ClassWithDynamicPropertiesMixin = _ember['default'].Object.extend(_emberFlexberryMixinsDynamicProperties['default'], {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-properties mixin');\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicProperties\\' property is not an \\'object\\' or an \\'instance\\'', function (assert) {\n    var wrongDynamicPropertiesArray = _ember['default'].A([1, true, false, 'some string', [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongDynamicPropertiesArray.length);\n\n    wrongDynamicPropertiesArray.forEach(function (wrongDynamicProperties) {\n      try {\n        ClassWithDynamicPropertiesMixin.create({ dynamicProperties: wrongDynamicProperties });\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicProperties.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicProperties\\' property is \\'' + _ember['default'].typeOf(wrongDynamicProperties) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin assignes it\\'s owner\\'s properties form the specified \\'dynamicProperties\\'', function (assert) {\n    assert.expect(1);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n  });\n\n  (0, _qunit.test)('Mixin changes it\\'s owner\\'s properties (when something changes inside related \\'dynamicProperties\\')', function (assert) {\n    assert.expect(2);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n\n    var propertyChangedValue = 'MyChangedValue';\n    _ember['default'].set(dynamicProperties, 'property', propertyChangedValue);\n\n    assert.strictEqual(mixinOwner.get('property'), propertyChangedValue, 'Owner\\'s properties changes when values inside \\'dynamicProperties\\' changes');\n  });\n\n  (0, _qunit.test)('Mixin removes old & adds new owner\\'s properties (when reference to whole \\'dynamicProperties\\' object changes)', function (assert) {\n    assert.expect(22);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    var newPropertyValue = 'MyNewProperty';\n    var newAnotherPropertyValue = 'MyNewAnotherProperty';\n    var newDynamicProperties = { newProperty: newPropertyValue, newAnotherProperty: newAnotherPropertyValue };\n    mixinOwner.set('dynamicProperties', newDynamicProperties);\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newProperty'), newPropertyValue, 'Owner\\'s \\'newProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newAnotherProperty'), newAnotherPropertyValue, 'Owner\\'s \\'newAnotherProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('newProperty'), true, 'Owner\\'s properties keys contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('newAnotherProperty'), true, 'Owner\\'s properties keys contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n\n    mixinOwner.set('dynamicProperties', null);\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('newProperty')), 'undefined', 'Owner\\'s \\'newProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('newAnotherProperty')), 'undefined', 'Owner\\'s \\'newAnotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.contains('newProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.contains('newAnotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n  });\n\n  (0, _qunit.test)('Mixin removes assigned \\'dynamicProperties\\' before owner will be destroyed', function (assert) {\n    assert.expect(12);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    mixinOwner.willDestroy();\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\'');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/dynamic-properties-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/dynamic-properties-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/dynamic-properties-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dynamic-properties-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-file-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsFlexberryFileController, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry file controller');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryFileControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsFlexberryFileController['default']);\n    var subject = FlexberryFileControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-file-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-file-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-file-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-file-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-groupedit-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsFlexberryGroupeditRoute, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry groupedit route');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryGroupeditRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsFlexberryGroupeditRoute['default']);\n    var subject = FlexberryGroupeditRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-groupedit-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-groupedit-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-groupedit-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-groupedit-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/lock-route-test', ['exports', 'ember', 'ember-flexberry/mixins/lock-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsLockRoute, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | lock-route');\n\n  (0, _qunit.test)('it works', function (assert) {\n    assert.expect(3);\n    var done = assert.async();\n    var EditFormRoute = _ember['default'].Route.extend(_emberFlexberryMixinsLockRoute['default']);\n    var route = EditFormRoute.create();\n    _ember['default'].run(function () {\n      assert.ok(route, 'Route created.');\n      _ember['default'].RSVP.all([route.openReadOnly().then(function (answer) {\n        assert.ok(answer, 'Default \\'openReadOnly\\' === \\'true\\'.');\n      }), route.unlockObject().then(function (answer) {\n        assert.ok(answer, 'Default \\'unlockObject\\' === \\'true\\'.');\n      })]).then(done);\n    });\n  });\n});","define('dummy/tests/unit/mixins/lock-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/lock-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/lock-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/lock-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/lock-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/lock-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test', ['exports', 'ember', 'ember-flexberry/mixins/modal-application-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsModalApplicationRoute, _qunit) {\n\n  (0, _qunit.module)('ModalApplicationRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ModalApplicationRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsModalApplicationRoute['default']);\n    var subject = ModalApplicationRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/modal-application-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/modal-application-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/modal-application-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/modal-application-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/paginated-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsPaginatedController, _qunit) {\n\n  (0, _qunit.module)('PaginatedControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsPaginatedController['default']);\n    var subject = PaginatedControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/paginated-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/paginated-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/paginated-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test', ['exports', 'ember', 'ember-flexberry/mixins/paginated-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsPaginatedRoute, _qunit) {\n\n  (0, _qunit.module)('PaginatedRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsPaginatedRoute['default']);\n    var subject = PaginatedRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/paginated-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/paginated-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/paginated-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/predicate-from-filters-test', ['exports', 'ember', 'ember-flexberry/mixins/predicate-from-filters', 'qunit'], function (exports, _ember, _emberFlexberryMixinsPredicateFromFilters, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | predicate from filters');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var PredicateFromFiltersObject = _ember['default'].Object.extend(_emberFlexberryMixinsPredicateFromFilters['default']);\n    var subject = PredicateFromFiltersObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/predicate-from-filters-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/predicate-from-filters-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/predicate-from-filters-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/predicate-from-filters-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/predicate-from-filters-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/predicate-from-filters-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test', ['exports', 'ember', 'ember-flexberry/mixins/reload-list-mixin', 'qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryMixinsReloadListMixin, _qunit, _dummyTestsHelpersStartApp, _emberFlexberryData) {\n  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;\n  var StringPredicate = _emberFlexberryData.Query.StringPredicate;\n  var ComplexPredicate = _emberFlexberryData.Query.ComplexPredicate;\n\n  (0, _qunit.module)('Unit | Mixin | reload list mixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var subject = ReloadListMixinObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('it properly generates simple filter predicate', function (assert) {\n    var Model = _emberFlexberryData.Projection.Model.extend({\n      firstName: DS.attr('string')\n    });\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: _emberFlexberryData.Projection.attr()\n    });\n\n    var modelSerializer = _emberFlexberryData.Serializer.Odata.extend({});\n    var projection = _ember['default'].get(Model, 'projections').EmployeeE;\n\n    var app = (0, _dummyTestsHelpersStartApp['default'])();\n\n    app.register('model:employeeTest', Model);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n\n    var result = objectInstance._getFilterPredicate(projection, { filter: 'test' });\n    var resultUndefined = objectInstance._getFilterPredicate(projection, { filter: undefined });\n    var resultEmpty = objectInstance._getFilterPredicate(projection, { filter: '' });\n    _ember['default'].run(app, 'destroy');\n\n    assert.equal(typeof result, 'object');\n    assert.equal(result.constructor, StringPredicate);\n    assert.equal(result.attributePath, 'firstName');\n    assert.equal(result.containsValue, 'test');\n\n    assert.equal(resultUndefined, null);\n    assert.equal(resultEmpty, null);\n  });\n\n  (0, _qunit.test)('it properly generates complex filter predicate', function (assert) {\n    var Model0 = _emberFlexberryData.Projection.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      dateField: DS.attr('date'),\n      numberField: DS.attr('number')\n    });\n\n    var app = (0, _dummyTestsHelpersStartApp['default'])();\n    app.register('model:employeeTest2', Model0);\n\n    var Model = _emberFlexberryData.Projection.Model.extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      dateField: DS.attr('date'),\n      numberField: DS.attr('number'),\n      masterField: DS.belongsTo('employeeTest2', { inverse: null, async: false })\n    });\n\n    app.register('model:employeeTest', Model);\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: _emberFlexberryData.Projection.attr(),\n      lastName: _emberFlexberryData.Projection.attr(),\n      dateField: _emberFlexberryData.Projection.attr(),\n      numberField: _emberFlexberryData.Projection.attr(),\n      reportsTo: _emberFlexberryData.Projection.belongsTo('employeeTest2', 'Reports To', {\n        firstName: _emberFlexberryData.Projection.attr('Reports To - First Name', {\n          hidden: true\n        })\n      }, {\n        displayMemberPath: 'firstName'\n      })\n    });\n\n    var modelSerializer = _emberFlexberryData.Serializer.Odata.extend({});\n    var modelSerializer0 = _emberFlexberryData.Serializer.Odata.extend({});\n    var projection = _ember['default'].get(Model, 'projections').EmployeeE;\n\n    app.register('serializer:employeeTest2', modelSerializer0);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n    var result = objectInstance._getFilterPredicate(projection, { filter: '123' });\n    _ember['default'].run(app, 'destroy');\n\n    assert.equal(typeof result, 'object');\n    assert.equal(result.constructor, ComplexPredicate);\n    assert.equal(result.condition, 'or');\n\n    // It counts only string fields.\n    assert.equal(result.predicates.length, 4);\n    assert.equal(result.predicates[0].constructor, StringPredicate);\n    assert.equal(result.predicates[0].attributePath, 'firstName');\n    assert.equal(result.predicates[0].containsValue, '123');\n    assert.equal(result.predicates[2].constructor, SimplePredicate);\n    assert.equal(result.predicates[2].attributePath, 'numberField');\n    assert.equal(result.predicates[2].operator, 'eq');\n    assert.equal(result.predicates[2].value, '123');\n    assert.equal(result.predicates[3].constructor, StringPredicate);\n    assert.equal(result.predicates[3].attributePath, 'reportsTo.firstName');\n    assert.equal(result.predicates[3].containsValue, '123');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/reload-list-mixin-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/reload-list-mixin-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/reload-list-mixin-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/reload-list-mixin-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/sortable-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsSortableController, _qunit) {\n\n  (0, _qunit.module)('SortableControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsSortableController['default']);\n    var subject = SortableControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/sortable-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/sortable-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/sortable-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test', ['exports', 'ember', 'ember-flexberry/mixins/sortable-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsSortableRoute, _qunit) {\n\n  (0, _qunit.module)('SortableRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsSortableRoute['default']);\n    var subject = SortableRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/sortable-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/sortable-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/sortable-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-flexberry-user-setting', 'Unit | Model | new-platform-flexberry-flexberry-user-setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-flexberry-user-setting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-services-lock-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-services-lock', 'Unit | Model | new-platform-flexberry-services-lock');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-services-lock-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-services-lock-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-services-lock-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-services-lock-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-services-lock-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-services-lock-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', {\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/application-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test', ['exports', 'ember-qunit', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberQunit, _emberFlexberryRoutesEditFormNew) {\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryRoutesEditFormNew['default'].create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-form-new-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-form-new-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-form-new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-new-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit-form', 'Unit | Route | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/list-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:list-form', 'Unit | Route | list form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/list-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/list-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/list-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/list-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/list-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new-platform-flexberry-services-lock-list', 'Unit | Route | new-platform-flexberry-services-lock-list');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/new-platform-flexberry-services-lock-list-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/new-platform-flexberry-services-lock-list-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/new-platform-flexberry-services-lock-list-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/new-platform-flexberry-services-lock-list-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-platform-flexberry-services-lock-list-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test', ['exports', 'qunit', 'ember-flexberry/routes/projected-model-form'], function (exports, _qunit, _emberFlexberryRoutesProjectedModelForm) {\n\n  (0, _qunit.module)('route:projected-model-form');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryRoutesProjectedModelForm['default'].create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/projected-model-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/projected-model-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/projected-model-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/projected-model-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-services-lock', 'Unit | Serializer | new-platform-flexberry-services-lock', {\n    needs: ['serializer:new-platform-flexberry-services-lock']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n    var serializedRecord = record.serialize();\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-services-lock-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-services-lock-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-services-lock-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-services-lock-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-services-lock-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:detail-interaction', 'Unit | Service | detail interaction', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/detail-interaction-test.js should pass jscs', function () {\n    ok(true, 'unit/services/detail-interaction-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/detail-interaction-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/detail-interaction-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/form-load-time-tracker-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:form-load-time-tracker', 'Unit | Service | form load time tracker', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/form-load-time-tracker-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/form-load-time-tracker-test.js should pass jscs', function () {\n    ok(true, 'unit/services/form-load-time-tracker-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/form-load-time-tracker-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/form-load-time-tracker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/form-load-time-tracker-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/log-test', ['exports', 'ember', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _ember, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n\n  var app = undefined;\n\n  (0, _qunit.module)('Unit | Service | log', {\n    beforeEach: function beforeEach() {\n      app = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    afterEach: function afterEach() {\n      (0, _dummyTestsHelpersDestroyApp['default'])(app);\n    }\n  });\n\n  (0, _qunit.test)('error works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system generated an error';\n    var errorMachineName = location.hostname;\n    var errorAppDomainName = window.navigator.userAgent;\n    var errorProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'ERROR');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '1');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), errorMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), errorProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('message')), errorMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.error(errorMessage);\n    });\n  });\n  (0, _qunit.test)('logService works properly when storeErrorMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var errorMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for error works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.error.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('warn works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeWarnMessages = true;\n    var warnMessage = 'The system generated an warn';\n    var warnMachineName = location.hostname;\n    var warnAppDomainName = window.navigator.userAgent;\n    var warnProcessId = document.location.href;\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'WARN');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '2');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), warnMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), warnAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), warnProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      var savedMessageContainsWarnMessage = savedLogRecord.get('message').indexOf(warnMessage) > -1;\n      assert.ok(savedMessageContainsWarnMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.warn.\n    _ember['default'].run(function () {\n      _ember['default'].warn(warnMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeWarnMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeWarnMessages = false;\n    var warnMessage = 'The system generated an warn';\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.warn.\n    _ember['default'].run(function () {\n      _ember['default'].warn(warnMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for warn works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeWarnMessages = true;\n    var warnMessage = 'The system generated an warn';\n\n    logService.on('warn', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.warn.\n    _ember['default'].run(function () {\n      _ember['default'].warn(warnMessage);\n    });\n  });\n\n  (0, _qunit.test)('log works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeLogMessages = true;\n    var logMessage = 'Logging log message';\n    var logMachineName = location.hostname;\n    var logAppDomainName = window.navigator.userAgent;\n    var logProcessId = document.location.href;\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'LOG');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '3');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), logMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), logAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), logProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('message')), logMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeLogMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeLogMessages = false;\n    var logMessage = 'Logging log message';\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for log works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeLogMessages = true;\n    var logMessage = 'Logging log message';\n\n    logService.on('log', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.log.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.log(logMessage);\n    });\n  });\n\n  (0, _qunit.test)('info works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeInfoMessages = true;\n    var infoMessage = 'Logging info message';\n    var infoMachineName = location.hostname;\n    var infoAppDomainName = window.navigator.userAgent;\n    var infoProcessId = document.location.href;\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'INFO');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '4');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), infoMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), infoAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), infoProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('message')), infoMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeInfoMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeInfoMessages = false;\n    var infoMessage = 'Logging info message';\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for info works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeInfoMessages = true;\n    var infoMessage = 'Logging info message';\n\n    logService.on('info', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.Logger.info.\n    _ember['default'].run(function () {\n      _ember['default'].Logger.info(infoMessage);\n    });\n  });\n\n  (0, _qunit.test)('debug works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDebugMessages = true;\n    var debugMessage = 'Logging debug message';\n    var debugMachineName = location.hostname;\n    var debugAppDomainName = window.navigator.userAgent;\n    var debugProcessId = document.location.href;\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'DEBUG');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '5');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), debugMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), debugAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), debugProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      var savedMessageContainsDebugMessage = savedLogRecord.get('message').indexOf(debugMessage) > -1;\n      assert.ok(savedMessageContainsDebugMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.debug.\n    _ember['default'].run(function () {\n      _ember['default'].debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeDebugMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDebugMessages = false;\n    var debugMessage = 'Logging debug message';\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.debug.\n    _ember['default'].run(function () {\n      _ember['default'].debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for debug works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeDebugMessages = true;\n    var debugMessage = 'Logging debug message';\n\n    logService.on('debug', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.debug.\n    _ember['default'].run(function () {\n      _ember['default'].debug(debugMessage);\n    });\n  });\n\n  (0, _qunit.test)('deprecate works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDeprecationMessages = true;\n    var deprecationMessage = 'The system generated an deprecation';\n    var deprecationMachineName = location.hostname;\n    var deprecationAppDomainName = window.navigator.userAgent;\n    var deprecationProcessId = document.location.href;\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'DEPRECATION');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '6');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), deprecationMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), deprecationAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), deprecationProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      var savedMessageContainsDeprecationMessage = savedLogRecord.get('message').indexOf(deprecationMessage) > -1;\n      assert.ok(savedMessageContainsDeprecationMessage);\n      var formattedMessageIsOk = savedLogRecord.get('formattedMessage') === '';\n      assert.ok(formattedMessageIsOk);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.deprecate.\n    _ember['default'].run(function () {\n      _ember['default'].deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeDeprecationMessages disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeDeprecationMessages = false;\n    var deprecationMessage = 'The system generated an deprecation';\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.deprecate.\n    _ember['default'].run(function () {\n      _ember['default'].deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('logService for deprecate works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeDeprecationMessages = true;\n    var deprecationMessage = 'The system generated an deprecation';\n\n    logService.on('deprecation', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.deprecate.\n    _ember['default'].run(function () {\n      _ember['default'].deprecate(deprecationMessage, false, { id: 'ember-flexberry-debug.feature-logger-deprecate-test', until: '0' });\n    });\n  });\n\n  (0, _qunit.test)('assert works properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var assertMessage = 'The system generated an error';\n    var assertMachineName = location.hostname;\n    var assertAppDomainName = window.navigator.userAgent;\n    var assertProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'ERROR');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '1');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), assertMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), assertAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), assertProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      var savedMessageContainsAssertMessage = savedLogRecord.get('message').indexOf(assertMessage) > -1;\n      assert.ok(savedMessageContainsAssertMessage);\n      var formattedMessageContainsAssertMessage = savedLogRecord.get('formattedMessage').indexOf(assertMessage) > -1;\n      assert.ok(formattedMessageContainsAssertMessage);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.assert.\n    _ember['default'].run(function () {\n      _ember['default'].assert(assertMessage, false);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeErrorMessages for assert disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var assertMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.assert.\n    _ember['default'].run(function () {\n      _ember['default'].assert(assertMessage, false);\n    });\n  });\n\n  (0, _qunit.test)('logService for assert works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var assertMessage = 'The system generated an error';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Call to Ember.assert.\n    _ember['default'].run(function () {\n      _ember['default'].assert(assertMessage, false);\n    });\n  });\n\n  (0, _qunit.test)('throwing exceptions logs properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system thrown an exception';\n    var errorMachineName = location.hostname;\n    var errorAppDomainName = window.navigator.userAgent;\n    var errorProcessId = document.location.href;\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'ERROR');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '1');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), errorMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), errorAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), errorProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('message')), errorMessage);\n      var formattedMessageContainsErrorMessage = savedLogRecord.get('formattedMessage').indexOf(errorMessage) > -1;\n      assert.ok(formattedMessageContainsErrorMessage);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storeErrorMessages for throw disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storeErrorMessages = false;\n    var errorMessage = 'The system thrown an exception';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for throw works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storeErrorMessages = true;\n    var errorMessage = 'The system thrown an exception';\n\n    logService.on('error', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      throw new Error(errorMessage);\n    });\n  });\n\n  (0, _qunit.test)('promise errors logs properly', function (assert) {\n    var done = assert.async();\n    assert.expect(9);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Override default QUnitAdapter.exception method to avoid calling additional assertion when rejecting promise.\n    var oldTestAdapterException = _ember['default'].Test.adapter.exception;\n    _ember['default'].Test.adapter.exception = function () {};\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storePromiseErrors = true;\n    logService.showPromiseErrors = false;\n    var promiseErrorMessage = 'Promise error';\n    var promiseMachineName = location.hostname;\n    var promiseAppDomainName = window.navigator.userAgent;\n    var promiseProcessId = document.location.href;\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('category')), 'PROMISE');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('eventId')), '0');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('priority')), '7');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('machineName')), promiseMachineName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('appDomainName')), promiseAppDomainName);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processId')), promiseProcessId);\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('processName')), 'EMBER-FLEXBERRY');\n      assert.strictEqual(_ember['default'].$.trim(savedLogRecord.get('message')), promiseErrorMessage);\n\n      var formattedMessageContainsPromiseErrorMessage = savedLogRecord.get('formattedMessage').indexOf(promiseErrorMessage) > -1;\n      assert.ok(formattedMessageContainsPromiseErrorMessage);\n\n      //Restore default QUnitAdapter.exception method\n      _ember['default'].Test.adapter.exception = oldTestAdapterException;\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      _ember['default'].RSVP.reject(promiseErrorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService works properly when storePromiseErrors disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Override default QUnitAdapter.exception method to avoid calling additional assertion when rejecting promise.\n    var oldTestAdapterException = _ember['default'].Test.adapter.exception;\n    _ember['default'].Test.adapter.exception = function () {};\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = true;\n    logService.storePromiseErrors = false;\n    logService.showPromiseErrors = false;\n    var promiseErrorMessage = 'Promise error';\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      assert.notOk(savedLogRecord);\n\n      //Restore default QUnitAdapter.exception method\n      _ember['default'].Test.adapter.exception = oldTestAdapterException;\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      _ember['default'].RSVP.reject(promiseErrorMessage);\n    });\n  });\n\n  (0, _qunit.test)('logService for promise works properly when it\\'s disabled', function (assert) {\n    var done = assert.async();\n    assert.expect(1);\n\n    // Stub save method of i-i-s-caseberry-logging-objects-application-log base model.\n    var originalSaveMethod = DS.Model.prototype.save;\n\n    var savedLogRecord = undefined;\n    DS.Model.prototype.save = function () {\n      savedLogRecord = this;\n      return _ember['default'].RSVP.resolve(savedLogRecord);\n    };\n\n    // Get log-service instance & enable errors logging.\n    var logService = app.__container__.lookup('service:log');\n    logService.enabled = false;\n    logService.storePromiseErrors = true;\n    var promiseErrorMessage = 'Promise error';\n\n    logService.on('promise', this, function (savedLogRecord) {\n      // Check results asyncronously.\n      if (savedLogRecord) {\n        throw new Error('Log is disabled, DB isn\\'t changed');\n      } else {\n        assert.ok(true, 'Check log call, DB isn\\'t changed');\n      }\n\n      // Restore save method of i-i-s-caseberry-logging-objects-application-log base model.\n      DS.Model.prototype.save = originalSaveMethod;\n      done();\n    });\n\n    // Throwing an exception.\n    _ember['default'].run(function () {\n      _ember['default'].RSVP.reject(promiseErrorMessage);\n    });\n  });\n});","define('dummy/tests/unit/services/log-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/log-test.js should pass jscs', function () {\n    ok(true, 'unit/services/log-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/log-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/log-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/log-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:objectlistview-events', 'Unit | Service | objectlistview events', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/objectlistview-events-test.js should pass jscs', function () {\n    ok(true, 'unit/services/objectlistview-events-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/objectlistview-events-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/objectlistview-events-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/deserialize-sorting-param-test', ['exports', 'ember', 'dummy/utils/deserialize-sorting-param', 'qunit'], function (exports, _ember, _dummyUtilsDeserializeSortingParam, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | deserialize sorting param');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var stringToDeserialize = '+type.name-moderated';\n    var result = (0, _dummyUtilsDeserializeSortingParam['default'])(stringToDeserialize);\n    assert.ok(result);\n    assert.ok(_ember['default'].isArray(result));\n    assert.equal(result.length, 2);\n    assert.equal(result[0].propName, 'type.name');\n    assert.equal(result[0].direction, 'asc');\n    assert.equal(result[1].propName, 'moderated');\n    assert.equal(result[1].direction, 'desc');\n  });\n\n  (0, _qunit.test)('empty param string', function (assert) {\n    var stringToDeserialize = '';\n    var result = (0, _dummyUtilsDeserializeSortingParam['default'])(stringToDeserialize);\n    assert.ok(result);\n    assert.ok(_ember['default'].isArray(result));\n    assert.equal(result.length, 0);\n  });\n});","define('dummy/tests/unit/utils/deserialize-sorting-param-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/deserialize-sorting-param-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/deserialize-sorting-param-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/deserialize-sorting-param-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/deserialize-sorting-param-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/deserialize-sorting-param-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/get-current-agregator-test', ['exports', 'dummy/utils/get-current-agregator', 'qunit', 'dummy/tests/helpers/start-app', 'ember'], function (exports, _dummyUtilsGetCurrentAgregator, _qunit, _dummyTestsHelpersStartApp, _ember) {\n\n  var App = undefined;\n\n  (0, _qunit.module)('Unit | Utility | get current agregator', {\n    setup: function setup() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    teardown: function teardown() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var detailInteractionService = App.__container__.lookup('service:detail-interaction');\n    var agregator = undefined;\n    _ember['default'].run(function () {\n      agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n    });\n\n    var agregatorsArray = _ember['default'].A();\n    detailInteractionService.pushValue('modelCurrentAgregators', agregatorsArray, agregator);\n    var result = _dummyUtilsGetCurrentAgregator['default'].call(agregator);\n    assert.ok(result);\n  });\n});","define('dummy/tests/unit/utils/get-current-agregator-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/get-current-agregator-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/get-current-agregator-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/get-current-agregator-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/get-current-agregator-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/get-current-agregator-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/need-save-current-agregator-test', ['exports', 'dummy/utils/need-save-current-agregator', 'qunit', 'dummy/tests/helpers/start-app', 'ember'], function (exports, _dummyUtilsNeedSaveCurrentAgregator, _qunit, _dummyTestsHelpersStartApp, _ember) {\n\n  var App = undefined;\n\n  (0, _qunit.module)('Unit | Utility | need save current agregator', {\n    setup: function setup() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n      var offlineGlobals = App.__container__.lookup('service:offline-globals');\n      offlineGlobals.setOnlineAvailable(false);\n    },\n    teardown: function teardown() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var agregator = undefined;\n    _ember['default'].run(function () {\n      agregator = App.__container__.lookup('service:store').createRecord('ember-flexberry-dummy-localization', { name: 'Localization' });\n    });\n\n    var resultOk = _dummyUtilsNeedSaveCurrentAgregator['default'].call(agregator, agregator);\n    assert.ok(resultOk);\n\n    var resultNotOk = _dummyUtilsNeedSaveCurrentAgregator['default'].call(agregator);\n    assert.notOk(resultNotOk);\n  });\n});","define('dummy/tests/unit/utils/need-save-current-agregator-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/need-save-current-agregator-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/need-save-current-agregator-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/need-save-current-agregator-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/need-save-current-agregator-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/need-save-current-agregator-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/serialize-sorting-param-test', ['exports', 'dummy/utils/serialize-sorting-param', 'qunit'], function (exports, _dummyUtilsSerializeSortingParam, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | serialize sorting param');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var sortingObject = [{ propName: 'type.name', direction: 'asc' }, { propName: 'moderated', direction: 'desc' }];\n\n    var result = (0, _dummyUtilsSerializeSortingParam['default'])(sortingObject);\n    assert.ok(result);\n    assert.equal(result, '+type.name-moderated');\n  });\n\n  (0, _qunit.test)('empty array', function (assert) {\n    var sortingObject = [];\n\n    var result = (0, _dummyUtilsSerializeSortingParam['default'])(sortingObject, null);\n    assert.equal(result, null);\n  });\n});","define('dummy/tests/unit/utils/serialize-sorting-param-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/serialize-sorting-param-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/serialize-sorting-param-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/serialize-sorting-param-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/serialize-sorting-param-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/serialize-sorting-param-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/string-test', ['exports', 'ember', 'qunit', 'ember-flexberry/utils/string'], function (exports, _ember, _qunit, _emberFlexberryUtilsString) {\n\n  (0, _qunit.module)('Unit | Util | render-string');\n\n  (0, _qunit.test)('Util is function', function (assert) {\n    assert.expect(1);\n\n    assert.strictEqual(_ember['default'].typeOf(_emberFlexberryUtilsString.render) === 'function', true, 'Imported \\'render-string\\' util is function');\n  });\n\n  (0, _qunit.test)('Util returns null for calls with unexpected arguments', function (assert) {\n    assert.expect(9);\n\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(), null, 'Returns null for calls without arguments');\n\n    _ember['default'].A([null, 1, true, false, {}, [], function () {}, new Date()]).forEach(function (wrongFirstArgument) {\n      assert.strictEqual((0, _emberFlexberryUtilsString.render)(wrongFirstArgument), null, 'Returns null for calls with first argument not of string type');\n    });\n  });\n\n  (0, _qunit.test)('Util returns same string for calls with unexpected render arguments', function (assert) {\n    assert.expect(4);\n\n    var stringWithTemplates = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplates), stringWithTemplates, 'Returns same string for calls without render options');\n\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplates, { context: null }), stringWithTemplates, 'Returns same string for calls without render context');\n\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplates, { context: { 'ONE': 1, 'TWO': 2, 'THREE': 3 } }), stringWithTemplates, 'Returns same string for calls with context without templates-related keys');\n\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplates, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['<<', '>>'] }), stringWithTemplates, 'Returns same string for calls with unexpected delimiters');\n  });\n\n  (0, _qunit.test)('Util returns rendered string for calls with expected render arguments', function (assert) {\n    assert.expect(2);\n\n    var stringWithTemplatesAndDefaultDelimiters = 'I have {{ one }} dollar in my wallet, {{ two }} apples in my bag, and {{ three }} hours of free time';\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplatesAndDefaultDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 } }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with default delimiters');\n\n    var stringWithTemplatesAndCustomDelimiters = 'I have {% one %} dollar in my wallet, {% two %} apples in my bag, and {% three %} hours of free time';\n    assert.strictEqual((0, _emberFlexberryUtilsString.render)(stringWithTemplatesAndCustomDelimiters, { context: { 'one': 1, 'two': 2, 'three': 3 }, delimiters: ['{%', '%}'] }), 'I have 1 dollar in my wallet, 2 apples in my bag, and 3 hours of free time', 'Returns rendered string for calls with custom delimiters');\n  });\n});","define('dummy/tests/unit/utils/string-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/string-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/string-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/string-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/string-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/string-test.js should pass jshint.');\n  });\n});","define('dummy/tests/views/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - views');\n  test('views/application.js should pass jscs', function () {\n    ok(true, 'views/application.js should pass jscs.');\n  });\n});","define('dummy/tests/views/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - views/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'views/application.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpIA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhhgnzenluxhIA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClppuhhvtEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrhlIA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrkCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}